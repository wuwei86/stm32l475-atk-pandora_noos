<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [usb\usb.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image usb\usb.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Tue May 24 21:37:20 2022
<BR><P>
<H3>Maximum Stack Usage =        344 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; MX_USB_HOST_Init &rArr; USBH_Init &rArr; USBH_LL_Init &rArr; HAL_HCD_Init &rArr; HAL_HCD_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI2_Config
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2a]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[12]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">BusFault_Handler</a><BR>
 <LI><a href="#[10]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">HardFault_Handler</a><BR>
 <LI><a href="#[11]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">MemManage_Handler</a><BR>
 <LI><a href="#[f]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">NMI_Handler</a><BR>
 <LI><a href="#[13]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">UsageFault_Handler</a><BR>
 <LI><a href="#[1af]">elog_output</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1af]">elog_output</a><BR>
 <LI><a href="#[1ba]">get_fmt_enabled</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1af]">elog_output</a><BR>
 <LI><a href="#[1b9]">elog_strcpy</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1af]">elog_output</a><BR>
 <LI><a href="#[1ad]">elog_get_filter_tag_lvl</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1af]">elog_output</a><BR>
 <LI><a href="#[1a8]">mem_cmp</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a8]">mem_cmp</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2a]">ADC1_2_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[47]">ADC3_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[12]">BusFault_Handler</a> from stm32l4xx_it.o(i.BusFault_Handler) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[2c]">CAN1_RX0_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[2d]">CAN1_RX1_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[2e]">CAN1_SCE_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[2b]">CAN1_TX_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[58]">COMP_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[55]">DFSDM1_FLT0_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[56]">DFSDM1_FLT1_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[57]">DFSDM1_FLT2_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[42]">DFSDM1_FLT3_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[23]">DMA1_Channel1_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[24]">DMA1_Channel2_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[25]">DMA1_Channel3_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[26]">DMA1_Channel4_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[27]">DMA1_Channel5_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[28]">DMA1_Channel6_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[29]">DMA1_Channel7_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[50]">DMA2_Channel1_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[51]">DMA2_Channel2_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[52]">DMA2_Channel3_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[53]">DMA2_Channel4_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[54]">DMA2_Channel5_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[5c]">DMA2_Channel6_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[5d]">DMA2_Channel7_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[15]">DebugMon_Handler</a> from stm32l4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[1e]">EXTI0_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[40]">EXTI15_10_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[1f]">EXTI1_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[20]">EXTI2_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[21]">EXTI3_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[22]">EXTI4_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[2f]">EXTI9_5_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[1c]">FLASH_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[48]">FMC_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[67]">FPU_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[10]">HardFault_Handler</a> from stm32l4xx_it.o(i.HardFault_Handler) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[38]">I2C1_ER_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[37]">I2C1_EV_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[3a]">I2C2_ER_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[39]">I2C2_EV_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[61]">I2C3_ER_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[60]">I2C3_EV_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[59]">LPTIM1_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[5a]">LPTIM2_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[5e]">LPUART1_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[11]">MemManage_Handler</a> from stm32l4xx_it.o(i.MemManage_Handler) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[f]">NMI_Handler</a> from stm32l4xx_it.o(i.NMI_Handler) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[5b]">OTG_FS_IRQHandler</a> from stm32l4xx_it.o(i.OTG_FS_IRQHandler) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[19]">PVD_PVM_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[16]">PendSV_Handler</a> from stm32l4xx_it.o(i.PendSV_Handler) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[5f]">QUADSPI_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[1d]">RCC_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[66]">RNG_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[41]">RTC_Alarm_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[1b]">RTC_WKUP_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[e]">Reset_Handler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[62]">SAI1_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[63]">SAI2_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[49]">SDMMC1_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[3b]">SPI1_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[3c]">SPI2_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[4b]">SPI3_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[14]">SVC_Handler</a> from stm32l4xx_it.o(i.SVC_Handler) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[64]">SWPMI1_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[17]">SysTick_Handler</a> from stm32l4xx_it.o(i.SysTick_Handler) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[69]">SystemInit</a> from system_stm32l4xx.o(i.SystemInit) referenced from startup_stm32l475xx.o(.text)
 <LI><a href="#[1a]">TAMP_STAMP_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[30]">TIM1_BRK_TIM15_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[33]">TIM1_CC_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[32]">TIM1_TRG_COM_TIM17_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[31]">TIM1_UP_TIM16_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[34]">TIM2_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[35]">TIM3_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[36]">TIM4_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[4a]">TIM5_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[4e]">TIM6_DAC_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[4f]">TIM7_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[43]">TIM8_BRK_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[46]">TIM8_CC_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[45]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[44]">TIM8_UP_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[65]">TSC_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[4c]">UART4_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[4d]">UART5_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[3d]">USART1_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[3e]">USART2_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[3f]">USART3_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[b]">USBH_MSC_ClassRequest</a> from usbh_msc.o(i.USBH_MSC_ClassRequest) referenced 2 times from usbh_msc.o(.data)
 <LI><a href="#[a]">USBH_MSC_InterfaceDeInit</a> from usbh_msc.o(i.USBH_MSC_InterfaceDeInit) referenced 2 times from usbh_msc.o(.data)
 <LI><a href="#[9]">USBH_MSC_InterfaceInit</a> from usbh_msc.o(i.USBH_MSC_InterfaceInit) referenced 2 times from usbh_msc.o(.data)
 <LI><a href="#[c]">USBH_MSC_Process</a> from usbh_msc.o(i.USBH_MSC_Process) referenced 2 times from usbh_msc.o(.data)
 <LI><a href="#[d]">USBH_MSC_SOFProcess</a> from usbh_msc.o(i.USBH_MSC_SOFProcess) referenced 2 times from usbh_msc.o(.data)
 <LI><a href="#[6b]">USBH_UserProcess</a> from usb_host.o(i.USBH_UserProcess) referenced from usb_host.o(i.MX_USB_HOST_Init)
 <LI><a href="#[75]">USBH_initialize</a> from usbh_diskio.o(i.USBH_initialize) referenced from usbh_diskio.o(.constdata)
 <LI><a href="#[79]">USBH_ioctl</a> from usbh_diskio.o(i.USBH_ioctl) referenced from usbh_diskio.o(.constdata)
 <LI><a href="#[77]">USBH_read</a> from usbh_diskio.o(i.USBH_read) referenced from usbh_diskio.o(.constdata)
 <LI><a href="#[76]">USBH_status</a> from usbh_diskio.o(i.USBH_status) referenced from usbh_diskio.o(.constdata)
 <LI><a href="#[78]">USBH_write</a> from usbh_diskio.o(i.USBH_write) referenced from usbh_diskio.o(.constdata)
 <LI><a href="#[13]">UsageFault_Handler</a> from stm32l4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[18]">WWDG_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[7a]">c_keyboard::on_key_clicked(int, int)</a> from uicode.o(i._ZN10c_keyboard14on_key_clickedEii) referenced from uicode.o(.constdata)
 <LI><a href="#[80]">c_keyboard::pre_create_wnd()</a> from uicode.o(i._ZN10c_keyboard14pre_create_wndEv) referenced from uicode.o(.constdata__ZTV10c_keyboard)
 <LI><a href="#[7d]">c_keyboard::on_init_children()</a> from uicode.o(i._ZN10c_keyboard16on_init_childrenEv) referenced from uicode.o(.constdata__ZTV10c_keyboard)
 <LI><a href="#[7e]">c_keyboard::on_paint()</a> from uicode.o(i._ZN10c_keyboard8on_paintEv) referenced from uicode.o(.constdata__ZTV10c_keyboard)
 <LI><a href="#[6f]">c_keyboard::~c_keyboard()</a> from uicode.o(i._ZN10c_keyboardD1Ev) referenced from uicode.o(.constdata__ZTV10c_keyboard)
 <LI><a href="#[6f]">c_keyboard::~c_keyboard()</a> from uicode.o(i._ZN10c_keyboardD1Ev) referenced from uicode.o(i.__sti___10_UIcode_cpp_396ac66f)
 <LI><a href="#[81]">c_wave_ctrl::on_init_children()</a> from uicode.o(i._ZN11c_wave_ctrl16on_init_childrenEv) referenced from uicode.o(.constdata__ZTV11c_wave_ctrl)
 <LI><a href="#[82]">c_wave_ctrl::on_paint()</a> from uicode.o(i._ZN11c_wave_ctrl8on_paintEv) referenced from uicode.o(.constdata__ZTV11c_wave_ctrl)
 <LI><a href="#[72]">c_wave_ctrl::~c_wave_ctrl()</a> from uicode.o(i._ZN11c_wave_ctrlD1Ev) referenced from uicode.o(.constdata__ZTV11c_wave_ctrl)
 <LI><a href="#[72]">c_wave_ctrl::~c_wave_ctrl()</a> from uicode.o(i._ZN11c_wave_ctrlD1Ev) referenced from uicode.o(i.__sti___10_UIcode_cpp_396ac66f)
 <LI><a href="#[86]">c_surface_no_fb::fill_rect_on_fb(int, int, int, int, unsigned)</a> from uicode.o(i._ZN15c_surface_no_fb15fill_rect_on_fbEiiiij) referenced from uicode.o(.constdata__ZTV15c_surface_no_fb)
 <LI><a href="#[87]">c_surface_no_fb::draw_pixel_on_fb(int, int, unsigned)</a> from uicode.o(i._ZN15c_surface_no_fb16draw_pixel_on_fbEiij) referenced from uicode.o(.constdata__ZTV15c_surface_no_fb)
 <LI><a href="#[89]">c_keyboard_button::on_paint()</a> from uicode.o(i._ZN17c_keyboard_button8on_paintEv) referenced from uicode.o(.constdata__ZTV17c_keyboard_button)
 <LI><a href="#[70]">c_keyboard_button::~c_keyboard_button()</a> from uicode.o(i._ZN17c_keyboard_buttonD1Ev) referenced from uicode.o(.constdata__ZTV17c_keyboard_button)
 <LI><a href="#[70]">c_keyboard_button::~c_keyboard_button()</a> from uicode.o(i._ZN17c_keyboard_buttonD1Ev) referenced from uicode.o(i.__sti___10_UIcode_cpp_396ac66f)
 <LI><a href="#[8b]">c_lattice_font_op::draw_string(c_surface*, int, const void*, int, int, const void*, unsigned, unsigned)</a> from uicode.o(i._ZN17c_lattice_font_op11draw_stringEP9c_surfaceiPKviiS3_jj) referenced from uicode.o(.constdata__ZTV17c_lattice_font_op)
 <LI><a href="#[8d]">c_lattice_font_op::get_str_size(const void*, const void*, int&, int&)</a> from uicode.o(i._ZN17c_lattice_font_op12get_str_sizeEPKvS1_RiS2_) referenced from uicode.o(.constdata__ZTV17c_lattice_font_op)
 <LI><a href="#[8c]">c_lattice_font_op::draw_string_in_rect(c_surface*, int, const void*, c_rect, const void*, unsigned, unsigned, unsigned)</a> from uicode.o(i._ZN17c_lattice_font_op19draw_string_in_rectEP9c_surfaceiPKv6c_rectS3_jjj) referenced from uicode.o(.constdata__ZTV17c_lattice_font_op)
 <LI><a href="#[7f]">c_wnd::show_window()</a> from uicode.o(i._ZN5c_wnd11show_windowEv) referenced from uicode.o(.constdata__ZTV10c_keyboard)
 <LI><a href="#[7f]">c_wnd::show_window()</a> from uicode.o(i._ZN5c_wnd11show_windowEv) referenced from uicode.o(.constdata__ZTV11c_wave_ctrl)
 <LI><a href="#[7f]">c_wnd::show_window()</a> from uicode.o(i._ZN5c_wnd11show_windowEv) referenced from uicode.o(.constdata__ZTV17c_keyboard_button)
 <LI><a href="#[7f]">c_wnd::show_window()</a> from uicode.o(i._ZN5c_wnd11show_windowEv) referenced from uicode.o(.constdata__ZTV5c_wnd)
 <LI><a href="#[7f]">c_wnd::show_window()</a> from uicode.o(i._ZN5c_wnd11show_windowEv) referenced from uicode.o(.constdata__ZTV6c_myUI)
 <LI><a href="#[7f]">c_wnd::show_window()</a> from uicode.o(i._ZN5c_wnd11show_windowEv) referenced from uicode.o(.constdata__ZTV8c_button)
 <LI><a href="#[83]">c_wnd::pre_create_wnd()</a> from uicode.o(i._ZN5c_wnd14pre_create_wndEv) referenced from uicode.o(.constdata__ZTV11c_wave_ctrl)
 <LI><a href="#[83]">c_wnd::pre_create_wnd()</a> from uicode.o(i._ZN5c_wnd14pre_create_wndEv) referenced from uicode.o(.constdata__ZTV5c_wnd)
 <LI><a href="#[83]">c_wnd::pre_create_wnd()</a> from uicode.o(i._ZN5c_wnd14pre_create_wndEv) referenced from uicode.o(.constdata__ZTV6c_myUI)
 <LI><a href="#[88]">c_wnd::on_init_children()</a> from uicode.o(i._ZN5c_wnd16on_init_childrenEv) referenced from uicode.o(.constdata__ZTV17c_keyboard_button)
 <LI><a href="#[88]">c_wnd::on_init_children()</a> from uicode.o(i._ZN5c_wnd16on_init_childrenEv) referenced from uicode.o(.constdata__ZTV5c_wnd)
 <LI><a href="#[88]">c_wnd::on_init_children()</a> from uicode.o(i._ZN5c_wnd16on_init_childrenEv) referenced from uicode.o(.constdata__ZTV8c_button)
 <LI><a href="#[7c]">c_wnd::connect(c_wnd*, unsigned short, const char*, short, short, short, short, struct_wnd_tree*)</a> from uicode.o(i._ZN5c_wnd7connectEPS_tPKcssssP15struct_wnd_tree) referenced from uicode.o(.constdata__ZTV10c_keyboard)
 <LI><a href="#[7c]">c_wnd::connect(c_wnd*, unsigned short, const char*, short, short, short, short, struct_wnd_tree*)</a> from uicode.o(i._ZN5c_wnd7connectEPS_tPKcssssP15struct_wnd_tree) referenced from uicode.o(.constdata__ZTV11c_wave_ctrl)
 <LI><a href="#[7c]">c_wnd::connect(c_wnd*, unsigned short, const char*, short, short, short, short, struct_wnd_tree*)</a> from uicode.o(i._ZN5c_wnd7connectEPS_tPKcssssP15struct_wnd_tree) referenced from uicode.o(.constdata__ZTV17c_keyboard_button)
 <LI><a href="#[7c]">c_wnd::connect(c_wnd*, unsigned short, const char*, short, short, short, short, struct_wnd_tree*)</a> from uicode.o(i._ZN5c_wnd7connectEPS_tPKcssssP15struct_wnd_tree) referenced from uicode.o(.constdata__ZTV5c_wnd)
 <LI><a href="#[7c]">c_wnd::connect(c_wnd*, unsigned short, const char*, short, short, short, short, struct_wnd_tree*)</a> from uicode.o(i._ZN5c_wnd7connectEPS_tPKcssssP15struct_wnd_tree) referenced from uicode.o(.constdata__ZTV6c_myUI)
 <LI><a href="#[7c]">c_wnd::connect(c_wnd*, unsigned short, const char*, short, short, short, short, struct_wnd_tree*)</a> from uicode.o(i._ZN5c_wnd7connectEPS_tPKcssssP15struct_wnd_tree) referenced from uicode.o(.constdata__ZTV8c_button)
 <LI><a href="#[8e]">c_wnd::on_paint()</a> from uicode.o(i._ZN5c_wnd8on_paintEv) referenced from uicode.o(.constdata__ZTV5c_wnd)
 <LI><a href="#[7b]">c_myUI::on_clicked(int, int)</a> from uicode.o(i._ZN6c_myUI10on_clickedEii) referenced from uicode.o(.constdata)
 <LI><a href="#[8f]">c_myUI::on_init_children()</a> from uicode.o(i._ZN6c_myUI16on_init_childrenEv) referenced from uicode.o(.constdata__ZTV6c_myUI)
 <LI><a href="#[90]">c_myUI::on_paint()</a> from uicode.o(i._ZN6c_myUI8on_paintEv) referenced from uicode.o(.constdata__ZTV6c_myUI)
 <LI><a href="#[71]">c_myUI::~c_myUI()</a> from uicode.o(i._ZN6c_myUID1Ev) referenced from uicode.o(.constdata__ZTV6c_myUI)
 <LI><a href="#[71]">c_myUI::~c_myUI()</a> from uicode.o(i._ZN6c_myUID1Ev) referenced from uicode.o(i.__sti___10_UIcode_cpp_396ac66f)
 <LI><a href="#[6c]">c_layer::c_layer()</a> from uicode.o(i._ZN7c_layerC1Ev) referenced from uicode.o(i._ZN9c_surfaceC1Ejjj13Z_ORDER_LEVEL6c_rect)
 <LI><a href="#[8a]">c_button::pre_create_wnd()</a> from uicode.o(i._ZN8c_button14pre_create_wndEv) referenced from uicode.o(.constdata__ZTV17c_keyboard_button)
 <LI><a href="#[8a]">c_button::pre_create_wnd()</a> from uicode.o(i._ZN8c_button14pre_create_wndEv) referenced from uicode.o(.constdata__ZTV8c_button)
 <LI><a href="#[91]">c_button::on_paint()</a> from uicode.o(i._ZN8c_button8on_paintEv) referenced from uicode.o(.constdata__ZTV8c_button)
 <LI><a href="#[73]">c_button::~c_button()</a> from uicode.o(i._ZN8c_buttonD1Ev) referenced from uicode.o(.constdata__ZTV8c_button)
 <LI><a href="#[73]">c_button::~c_button()</a> from uicode.o(i._ZN8c_buttonD1Ev) referenced from uicode.o(i.__sti___10_UIcode_cpp_396ac66f)
 <LI><a href="#[84]">c_surface::draw_pixel(int, int, unsigned, unsigned)</a> from uicode.o(i._ZN9c_surface10draw_pixelEiijj) referenced from uicode.o(.constdata__ZTV15c_surface_no_fb)
 <LI><a href="#[84]">c_surface::draw_pixel(int, int, unsigned, unsigned)</a> from uicode.o(i._ZN9c_surface10draw_pixelEiijj) referenced from uicode.o(.constdata__ZTV9c_surface)
 <LI><a href="#[92]">c_surface::fill_rect_on_fb(int, int, int, int, unsigned)</a> from uicode.o(i._ZN9c_surface15fill_rect_on_fbEiiiij) referenced from uicode.o(.constdata__ZTV9c_surface)
 <LI><a href="#[93]">c_surface::draw_pixel_on_fb(int, int, unsigned)</a> from uicode.o(i._ZN9c_surface16draw_pixel_on_fbEiij) referenced from uicode.o(.constdata__ZTV9c_surface)
 <LI><a href="#[85]">c_surface::fill_rect(int, int, int, int, unsigned, unsigned)</a> from uicode.o(i._ZN9c_surface9fill_rectEiiiijj) referenced from uicode.o(.constdata__ZTV15c_surface_no_fb)
 <LI><a href="#[85]">c_surface::fill_rect(int, int, int, int, unsigned, unsigned)</a> from uicode.o(i._ZN9c_surface9fill_rectEiiiijj) referenced from uicode.o(.constdata__ZTV9c_surface)
 <LI><a href="#[6a]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32l475xx.o(.text)
 <LI><a href="#[94]">__sti___10_UIcode_cpp_396ac66f</a> from uicode.o(i.__sti___10_UIcode_cpp_396ac66f) referenced from uicode.o(.init_array)
 <LI><a href="#[6e]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0snprintf)
 <LI><a href="#[6e]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[6d]">fputc</a> from bsp.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[74]">gfx_draw_pixel</a> from main.o(i.gfx_draw_pixel) referenced from main.o(i.main)
 <LI><a href="#[68]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[6a]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(.text)
</UL>
<P><STRONG><a name="[1df]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[96]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[af]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1e0]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[98]"></a>_main_cpp_init$empty</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8a.o(.ARM.Collect$$$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = _main_cpp_init$empty &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[1e1]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1e2]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1e3]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[99]"></a>__rt_final_cpp$nonempty</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10b.o(.ARM.Collect$$$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __rt_final_cpp$nonempty &rArr; __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[1e4]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[e]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>DFSDM1_FLT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>DFSDM1_FLT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>DFSDM1_FLT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DFSDM1_FLT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>DMA2_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>DMA2_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>PVD_PVM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>SAI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>SWPMI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM1_BRK_TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM1_TRG_COM_TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM1_UP_TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1e5]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[cf]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_Application
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Init
</UL>

<P><STRONG><a name="[1e6]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[9f]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1e7]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1e8]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[9e]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_Inquiry
</UL>

<P><STRONG><a name="[d3]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wave_buffer::c_wave_buffer()
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wave_ctrl::set_wave_in_out_rate(unsigned, unsigned)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard::pre_create_wnd()
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard::on_key_clicked(int, int)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_MspInit
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_InterfaceInit
</UL>

<P><STRONG><a name="[1e9]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1b7]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
</UL>

<P><STRONG><a name="[1b6]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
</UL>

<P><STRONG><a name="[1b0]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_get_filter_tag_lvl
</UL>

<P><STRONG><a name="[a1]"></a>calloc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, calloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = calloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_surface::set_surface(Z_ORDER_LEVEL, c_rect)
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wave_ctrl::on_init_children()
</UL>

<P><STRONG><a name="[95]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cpp_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_cpp_init$empty
</UL>

<P><STRONG><a name="[a3]"></a>__aeabi_atexit</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, aeabi_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = __aeabi_atexit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_UIcode_cpp_396ac66f
</UL>

<P><STRONG><a name="[a5]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1ea]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[198]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[9d]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[1eb]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[9c]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[1ec]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[1ed]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[a4]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpp_dtor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[9a]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_final_cpp$nonempty
</UL>

<P><STRONG><a name="[a6]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[a8]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[a9]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[ab]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[ac]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[ad]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[ae]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[195]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[97]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1ee]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[aa]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1ef]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[1f0]"></a>__rt_lib_shutdown_cpp_2</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cpp_final.o(.text), UNUSED)

<P><STRONG><a name="[1f1]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1f2]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[12]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[d5]"></a>Error_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_HOST_Init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_Application
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_MspInit
</UL>

<P><STRONG><a name="[111]"></a>FATFS_LinkDriver</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ff_gen_drv.o(i.FATFS_LinkDriver))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FATFS_Init
</UL>

<P><STRONG><a name="[1f3]"></a>FATFS_LinkDriverEx</STRONG> (Thumb, 64 bytes, Stack size 4 bytes, ff_gen_drv.o(i.FATFS_LinkDriverEx), UNUSED)

<P><STRONG><a name="[b0]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32l4xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetCurrentMode
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetPort
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_DriverVBUS
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Delay
</UL>

<P><STRONG><a name="[d6]"></a>HAL_GPIO_Init</STRONG> (Thumb, 500 bytes, Stack size 56 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Gpio_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_MspInit
</UL>

<P><STRONG><a name="[101]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_HalfWord
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_Data
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_Cmd
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Gpio_Init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DriverVbusFS
</UL>

<P><STRONG><a name="[b1]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI2_Config
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_Config
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFifoStateUntilTimeout
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[b2]"></a>HAL_HCD_Connect_Callback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbh_conf.o(i.HAL_HCD_Connect_Callback))
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Connect
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Port_IRQHandler
</UL>

<P><STRONG><a name="[b4]"></a>HAL_HCD_Disconnect_Callback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbh_conf.o(i.HAL_HCD_Disconnect_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_HCD_Disconnect_Callback &rArr; USBH_LL_Disconnect &rArr; USBH_LL_Stop &rArr; HAL_HCD_Stop &rArr; USB_StopHost &rArr; USB_FlushTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>

<P><STRONG><a name="[b6]"></a>HAL_HCD_GetCurrentFrame</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_hal_hcd.o(i.HAL_HCD_GetCurrentFrame))
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetCurrentFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Init
</UL>

<P><STRONG><a name="[b8]"></a>HAL_HCD_GetCurrentSpeed</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_hal_hcd.o(i.HAL_HCD_GetCurrentSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_HCD_GetCurrentSpeed &rArr; USB_GetHostSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetHostSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_GetSpeed
</UL>

<P><STRONG><a name="[145]"></a>HAL_HCD_HC_GetURBState</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l4xx_hal_hcd.o(i.HAL_HCD_HC_GetURBState))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_GetURBState
</UL>

<P><STRONG><a name="[143]"></a>HAL_HCD_HC_GetXferCount</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l4xx_hal_hcd.o(i.HAL_HCD_HC_GetXferCount))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_GetLastXferSize
</UL>

<P><STRONG><a name="[ba]"></a>HAL_HCD_HC_Halt</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32l4xx_hal_hcd.o(i.HAL_HCD_HC_Halt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_HCD_HC_Halt &rArr; USB_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HC_Halt
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_ClosePipe
</UL>

<P><STRONG><a name="[bc]"></a>HAL_HCD_HC_Init</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, stm32l4xx_hal_hcd.o(i.HAL_HCD_HC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_HCD_HC_Init &rArr; USB_HC_Init &rArr; USB_GetHostSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_OpenPipe
</UL>

<P><STRONG><a name="[fb]"></a>HAL_HCD_HC_NotifyURBChange_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbh_conf.o(i.HAL_HCD_HC_NotifyURBChange_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_HC_OUT_IRQHandler
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_HC_IN_IRQHandler
</UL>

<P><STRONG><a name="[be]"></a>HAL_HCD_HC_SubmitRequest</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, stm32l4xx_hal_hcd.o(i.HAL_HCD_HC_SubmitRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HC_StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_SubmitURB
</UL>

<P><STRONG><a name="[c0]"></a>HAL_HCD_IRQHandler</STRONG> (Thumb, 314 bytes, Stack size 24 bytes, stm32l4xx_hal_hcd.o(i.HAL_HCD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_HCD_IRQHandler &rArr; HAL_HCD_Disconnect_Callback &rArr; USBH_LL_Disconnect &rArr; USBH_LL_Stop &rArr; HAL_HCD_Stop &rArr; USB_StopHost &rArr; USB_FlushTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadInterrupts
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_InitFSLSPClkSel
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HC_ReadInterrupt
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetMode
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushTxFifo
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushRxFifo
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_RXQLVL_IRQHandler
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Port_IRQHandler
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_HC_OUT_IRQHandler
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_HC_IN_IRQHandler
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_SOF_Callback
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Disconnect_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
</UL>

<P><STRONG><a name="[cc]"></a>HAL_HCD_Init</STRONG> (Thumb, 114 bytes, Stack size 56 bytes, stm32l4xx_hal_hcd.o(i.HAL_HCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = HAL_HCD_Init &rArr; HAL_HCD_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetCurrentMode
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostInit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisableGlobalInt
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CoreInit
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Init
</UL>

<P><STRONG><a name="[cd]"></a>HAL_HCD_MspInit</STRONG> (Thumb, 204 bytes, Stack size 184 bytes, usbh_conf.o(i.HAL_HCD_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = HAL_HCD_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableVddUSB
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Init
</UL>

<P><STRONG><a name="[da]"></a>HAL_HCD_PortDisabled_Callback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbh_conf.o(i.HAL_HCD_PortDisabled_Callback))
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_PortDisabled
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Port_IRQHandler
</UL>

<P><STRONG><a name="[dc]"></a>HAL_HCD_PortEnabled_Callback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbh_conf.o(i.HAL_HCD_PortEnabled_Callback))
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_PortEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Port_IRQHandler
</UL>

<P><STRONG><a name="[de]"></a>HAL_HCD_ResetPort</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_hal_hcd.o(i.HAL_HCD_ResetPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_HCD_ResetPort &rArr; USB_ResetPort &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetPort
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_ResetPort
</UL>

<P><STRONG><a name="[c7]"></a>HAL_HCD_SOF_Callback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbh_conf.o(i.HAL_HCD_SOF_Callback))
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_IncTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>

<P><STRONG><a name="[e1]"></a>HAL_HCD_Start</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32l4xx_hal_hcd.o(i.HAL_HCD_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_HCD_Start &rArr; USB_DriveVbus
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableGlobalInt
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DriveVbus
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Start
</UL>

<P><STRONG><a name="[e4]"></a>HAL_HCD_Stop</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32l4xx_hal_hcd.o(i.HAL_HCD_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_HCD_Stop &rArr; USB_StopHost &rArr; USB_FlushTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StopHost
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Stop
</UL>

<P><STRONG><a name="[11d]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[e6]"></a>HAL_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32l4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e8]"></a>HAL_InitTick</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32l4xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[e9]"></a>HAL_MspInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32l4xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[d9]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_MspInit
</UL>

<P><STRONG><a name="[d8]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_MspInit
</UL>

<P><STRONG><a name="[e7]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[11f]"></a>HAL_PWREx_ControlVoltageScaling</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(i.HAL_PWREx_ControlVoltageScaling))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[d7]"></a>HAL_PWREx_EnableVddUSB</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(i.HAL_PWREx_EnableVddUSB))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_MspInit
</UL>

<P><STRONG><a name="[11a]"></a>HAL_PWREx_GetVoltageRange</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(i.HAL_PWREx_GetVoltageRange))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
</UL>

<P><STRONG><a name="[d4]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 928 bytes, Stack size 40 bytes, stm32l4xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI2_Config
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_MspInit
</UL>

<P><STRONG><a name="[ee]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 266 bytes, Stack size 32 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[121]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[122]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[ef]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[f0]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1310 bytes, Stack size 32 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[f2]"></a>HAL_SPI_Init</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, stm32l4xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_Init
</UL>

<P><STRONG><a name="[f3]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, spi3.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[f4]"></a>HAL_SPI_Transmit</STRONG> (Thumb, 392 bytes, Stack size 40 bytes, stm32l4xx_hal_spi.o(i.HAL_SPI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_WriteByte
</UL>

<P><STRONG><a name="[ea]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32l4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[f6]"></a>HAL_UART_Init</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[f7]"></a>HAL_UART_MspInit</STRONG> (Thumb, 118 bytes, Stack size 168 bytes, stm32l4xx_hal_msp.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[10]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[fd]"></a>LCD_Address_Set</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, lcd.o(i.LCD_Address_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LCD_Address_Set &rArr; LCD_Write_Data &rArr; LCD_SPI_Send &rArr; SPI3_WriteByte &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_Data
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Draw_ColorPoint
</UL>

<P><STRONG><a name="[100]"></a>LCD_Clear</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, lcd.o(i.LCD_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LCD_Clear &rArr; LCD_Address_Set &rArr; LCD_Write_Data &rArr; LCD_SPI_Send &rArr; SPI3_WriteByte &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SPI_Send
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[103]"></a>LCD_Draw_ColorPoint</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lcd.o(i.LCD_Draw_ColorPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LCD_Draw_ColorPoint &rArr; LCD_Address_Set &rArr; LCD_Write_Data &rArr; LCD_SPI_Send &rArr; SPI3_WriteByte &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_HalfWord
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfx_draw_pixel
</UL>

<P><STRONG><a name="[108]"></a>LCD_Init</STRONG> (Thumb, 412 bytes, Stack size 8 bytes, lcd.o(i.LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LCD_Init &rArr; LCD_Clear &rArr; LCD_Address_Set &rArr; LCD_Write_Data &rArr; LCD_SPI_Send &rArr; SPI3_WriteByte &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_Data
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_Cmd
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Gpio_Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[104]"></a>LCD_Write_HalfWord</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lcd.o(i.LCD_Write_HalfWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LCD_Write_HalfWord &rArr; LCD_SPI_Send &rArr; SPI3_WriteByte &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SPI_Send
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Draw_ColorPoint
</UL>

<P><STRONG><a name="[10f]"></a>MX_DriverVbusFS</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usbh_platform.o(i.MX_DriverVbusFS))
<BR><BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_DriverVBUS
</UL>

<P><STRONG><a name="[110]"></a>MX_FATFS_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fatfs.o(i.MX_FATFS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MX_FATFS_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_LinkDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[112]"></a>MX_GPIO_Init</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, bsp.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[113]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, bsp.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[114]"></a>MX_USB_HOST_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usb_host.o(i.MX_USB_HOST_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = MX_USB_HOST_Init &rArr; USBH_Init &rArr; USBH_LL_Init &rArr; HAL_HCD_Init &rArr; HAL_HCD_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Start
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_RegisterClass
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[118]"></a>MX_USB_HOST_Process</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_host.o(i.MX_USB_HOST_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = MX_USB_HOST_Process &rArr; USBH_Process &rArr; USBH_HandleEnum &rArr; USBH_Get_StringDesc &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.OTG_FS_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = OTG_FS_IRQHandler &rArr; HAL_HCD_IRQHandler &rArr; HAL_HCD_Disconnect_Callback &rArr; USBH_LL_Disconnect &rArr; USBH_LL_Stop &rArr; HAL_HCD_Stop &rArr; USB_StopHost &rArr; USB_FlushTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[107]"></a>SPI3_Init</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, spi3.o(i.SPI3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SPI3_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Gpio_Init
</UL>

<P><STRONG><a name="[109]"></a>SPI3_WriteByte</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, spi3.o(i.SPI3_WriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SPI3_WriteByte &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SPI_Send
</UL>

<P><STRONG><a name="[14]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.SysTick_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[11e]"></a>SystemClock_Config</STRONG> (Thumb, 116 bytes, Stack size 96 bytes, bsp.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ControlVoltageScaling
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[69]"></a>SystemInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, system_stm32l4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(.text)
</UL>
<P><STRONG><a name="[f9]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 200 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.UART_AdvFeatureConfig))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[fa]"></a>UART_CheckIdleState</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, stm32l4xx_hal_uart.o(i.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[f8]"></a>UART_SetConfig</STRONG> (Thumb, 542 bytes, Stack size 24 bytes, stm32l4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[120]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, stm32l4xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[123]"></a>USBH_AllocPipe</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usbh_pipes.o(i.USBH_AllocPipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_AllocPipe
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetFreePipe
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_InterfaceInit
</UL>

<P><STRONG><a name="[125]"></a>USBH_BulkReceiveData</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, usbh_ioreq.o(i.USBH_BulkReceiveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = USBH_BulkReceiveData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_SubmitURB
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Process
</UL>

<P><STRONG><a name="[127]"></a>USBH_BulkSendData</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, usbh_ioreq.o(i.USBH_BulkSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = USBH_BulkSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_SubmitURB
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Process
</UL>

<P><STRONG><a name="[128]"></a>USBH_ClosePipe</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbh_pipes.o(i.USBH_ClosePipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USBH_ClosePipe &rArr; USBH_LL_ClosePipe &rArr; HAL_HCD_HC_Halt &rArr; USB_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_ClosePipe
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_InterfaceDeInit
</UL>

<P><STRONG><a name="[12a]"></a>USBH_ClrFeature</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, usbh_ctlreq.o(i.USBH_ClrFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = USBH_ClrFeature &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Abort
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_ClassRequest
</UL>

<P><STRONG><a name="[12c]"></a>USBH_CtlReceiveData</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, usbh_ioreq.o(i.USBH_CtlReceiveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = USBH_CtlReceiveData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_SubmitURB
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
</UL>

<P><STRONG><a name="[12b]"></a>USBH_CtlReq</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, usbh_ctlreq.o(i.USBH_CtlReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_REQ_Reset
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_REQ_GetMaxLUN
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetDescriptor
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ClrFeature
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetFeature
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetCfg
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetAddress
</UL>

<P><STRONG><a name="[12e]"></a>USBH_CtlSendData</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, usbh_ioreq.o(i.USBH_CtlSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_SubmitURB
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
</UL>

<P><STRONG><a name="[12f]"></a>USBH_CtlSendSetup</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, usbh_ioreq.o(i.USBH_CtlSendSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_SubmitURB
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
</UL>

<P><STRONG><a name="[130]"></a>USBH_Delay</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbh_conf.o(i.USBH_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_Delay &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[152]"></a>USBH_FindInterface</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, usbh_core.o(i.USBH_FindInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_FindInterface
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_InterfaceInit
</UL>

<P><STRONG><a name="[139]"></a>USBH_FreePipe</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usbh_pipes.o(i.USBH_FreePipe))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Disconnect
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_InterfaceDeInit
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[131]"></a>USBH_GetDescriptor</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, usbh_ctlreq.o(i.USBH_GetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_StringDesc
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_DevDesc
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_CfgDesc
</UL>

<P><STRONG><a name="[15e]"></a>USBH_GetNextDesc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbh_ctlreq.o(i.USBH_GetNextDesc))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseCfgDesc
</UL>

<P><STRONG><a name="[132]"></a>USBH_Get_CfgDesc</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, usbh_ctlreq.o(i.USBH_Get_CfgDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = USBH_Get_CfgDesc &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetDescriptor
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseCfgDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[134]"></a>USBH_Get_DevDesc</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, usbh_ctlreq.o(i.USBH_Get_DevDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = USBH_Get_DevDesc &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetDescriptor
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseDevDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[136]"></a>USBH_Get_StringDesc</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, usbh_ctlreq.o(i.USBH_Get_StringDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = USBH_Get_StringDesc &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetDescriptor
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseStringDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[13f]"></a>USBH_Get_USB_Status</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, usbh_conf.o(i.USBH_Get_USB_Status))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_SubmitURB
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Stop
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Start
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_ResetPort
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_OpenPipe
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_ClosePipe
</UL>

<P><STRONG><a name="[115]"></a>USBH_Init</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, usbh_core.o(i.USBH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = USBH_Init &rArr; USBH_LL_Init &rArr; HAL_HCD_Init &rArr; HAL_HCD_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeInitStateMachine
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_HOST_Init
</UL>

<P><STRONG><a name="[129]"></a>USBH_LL_ClosePipe</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbh_conf.o(i.USBH_LL_ClosePipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USBH_LL_ClosePipe &rArr; HAL_HCD_HC_Halt &rArr; USB_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_Halt
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ClosePipe
</UL>

<P><STRONG><a name="[b3]"></a>USBH_LL_Connect</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbh_core.o(i.USBH_LL_Connect))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Connect_Callback
</UL>

<P><STRONG><a name="[b5]"></a>USBH_LL_Disconnect</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usbh_core.o(i.USBH_LL_Disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USBH_LL_Disconnect &rArr; USBH_LL_Stop &rArr; HAL_HCD_Stop &rArr; USB_StopHost &rArr; USB_FlushTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Stop
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_FreePipe
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Disconnect_Callback
</UL>

<P><STRONG><a name="[141]"></a>USBH_LL_DriverVBUS</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbh_conf.o(i.USBH_LL_DriverVBUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBH_LL_DriverVBUS &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DriverVbusFS
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Start
</UL>

<P><STRONG><a name="[142]"></a>USBH_LL_GetLastXferSize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbh_conf.o(i.USBH_LL_GetLastXferSize))
<BR><BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_GetXferCount
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_DecodeCSW
</UL>

<P><STRONG><a name="[144]"></a>USBH_LL_GetSpeed</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usbh_conf.o(i.USBH_LL_GetSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_LL_GetSpeed &rArr; HAL_HCD_GetCurrentSpeed &rArr; USB_GetHostSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_GetCurrentSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[14e]"></a>USBH_LL_GetToggle</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, usbh_conf.o(i.USBH_LL_GetToggle))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Process
</UL>

<P><STRONG><a name="[138]"></a>USBH_LL_GetURBState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbh_conf.o(i.USBH_LL_GetURBState))
<BR><BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_GetURBState
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Process
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
</UL>

<P><STRONG><a name="[e0]"></a>USBH_LL_IncTimer</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbh_core.o(i.USBH_LL_IncTimer))
<BR><BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleSof
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_SOF_Callback
</UL>

<P><STRONG><a name="[13e]"></a>USBH_LL_Init</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, usbh_conf.o(i.USBH_LL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = USBH_LL_Init &rArr; HAL_HCD_Init &rArr; HAL_HCD_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_GetCurrentFrame
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_SetTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Init
</UL>

<P><STRONG><a name="[148]"></a>USBH_LL_OpenPipe</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, usbh_conf.o(i.USBH_LL_OpenPipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = USBH_LL_OpenPipe &rArr; HAL_HCD_HC_Init &rArr; USB_HC_Init &rArr; USB_GetHostSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_Init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OpenPipe
</UL>

<P><STRONG><a name="[db]"></a>USBH_LL_PortDisabled</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbh_core.o(i.USBH_LL_PortDisabled))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_PortDisabled_Callback
</UL>

<P><STRONG><a name="[dd]"></a>USBH_LL_PortEnabled</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbh_core.o(i.USBH_LL_PortEnabled))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_PortEnabled_Callback
</UL>

<P><STRONG><a name="[149]"></a>USBH_LL_ResetPort</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbh_conf.o(i.USBH_LL_ResetPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBH_LL_ResetPort &rArr; HAL_HCD_ResetPort &rArr; USB_ResetPort &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_ResetPort
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[147]"></a>USBH_LL_SetTimer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbh_core.o(i.USBH_LL_SetTimer))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Init
</UL>

<P><STRONG><a name="[14f]"></a>USBH_LL_SetToggle</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, usbh_conf.o(i.USBH_LL_SetToggle))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Process
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_InterfaceInit
</UL>

<P><STRONG><a name="[14a]"></a>USBH_LL_Start</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbh_conf.o(i.USBH_LL_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBH_LL_Start &rArr; HAL_HCD_Start &rArr; USB_DriveVbus
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Start
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Start
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[140]"></a>USBH_LL_Stop</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbh_conf.o(i.USBH_LL_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USBH_LL_Stop &rArr; HAL_HCD_Stop &rArr; USB_StopHost &rArr; USB_FlushTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Stop
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Disconnect
</UL>

<P><STRONG><a name="[126]"></a>USBH_LL_SubmitURB</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, usbh_conf.o(i.USBH_LL_SubmitURB))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_SubmitRequest
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_BulkSendData
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_BulkReceiveData
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlSendSetup
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlSendData
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReceiveData
</UL>

<P><STRONG><a name="[154]"></a>USBH_MSC_BOT_Init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usbh_msc_bot.o(i.USBH_MSC_BOT_Init))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_InterfaceInit
</UL>

<P><STRONG><a name="[14c]"></a>USBH_MSC_BOT_Process</STRONG> (Thumb, 570 bytes, Stack size 24 bytes, usbh_msc_bot.o(i.USBH_MSC_BOT_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = USBH_MSC_BOT_Process &rArr; USBH_MSC_BOT_REQ_Reset &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_SetToggle
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_GetURBState
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_GetToggle
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_REQ_Reset
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_DecodeCSW
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Abort
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_BulkSendData
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_BulkReceiveData
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_Write
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_TestUnitReady
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_RequestSense
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_ReadCapacity
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_Read
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_Inquiry
</UL>

<P><STRONG><a name="[151]"></a>USBH_MSC_BOT_REQ_GetMaxLUN</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usbh_msc_bot.o(i.USBH_MSC_BOT_REQ_GetMaxLUN))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = USBH_MSC_BOT_REQ_GetMaxLUN &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_ClassRequest
</UL>

<P><STRONG><a name="[150]"></a>USBH_MSC_BOT_REQ_Reset</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usbh_msc_bot.o(i.USBH_MSC_BOT_REQ_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = USBH_MSC_BOT_REQ_Reset &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Process
</UL>

<P><STRONG><a name="[163]"></a>USBH_MSC_GetLUNInfo</STRONG> (Thumb, 112 bytes, Stack size 20 bytes, usbh_msc.o(i.USBH_MSC_GetLUNInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USBH_MSC_GetLUNInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_write
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_read
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ioctl
</UL>

<P><STRONG><a name="[15c]"></a>USBH_MSC_Read</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, usbh_msc.o(i.USBH_MSC_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = USBH_MSC_Read &rArr; USBH_MSC_RdWrProcess &rArr; USBH_MSC_SCSI_Write &rArr; USBH_MSC_BOT_Process &rArr; USBH_MSC_BOT_REQ_Reset &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_Read
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_RdWrProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_read
</UL>

<P><STRONG><a name="[155]"></a>USBH_MSC_SCSI_Inquiry</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, usbh_msc_scsi.o(i.USBH_MSC_SCSI_Inquiry))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = USBH_MSC_SCSI_Inquiry &rArr; USBH_MSC_BOT_Process &rArr; USBH_MSC_BOT_REQ_Reset &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Process
</UL>

<P><STRONG><a name="[15a]"></a>USBH_MSC_SCSI_Read</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, usbh_msc_scsi.o(i.USBH_MSC_SCSI_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = USBH_MSC_SCSI_Read &rArr; USBH_MSC_BOT_Process &rArr; USBH_MSC_BOT_REQ_Reset &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Read
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_RdWrProcess
</UL>

<P><STRONG><a name="[157]"></a>USBH_MSC_SCSI_ReadCapacity</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, usbh_msc_scsi.o(i.USBH_MSC_SCSI_ReadCapacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = USBH_MSC_SCSI_ReadCapacity &rArr; USBH_MSC_BOT_Process &rArr; USBH_MSC_BOT_REQ_Reset &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Process
</UL>

<P><STRONG><a name="[158]"></a>USBH_MSC_SCSI_RequestSense</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, usbh_msc_scsi.o(i.USBH_MSC_SCSI_RequestSense))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = USBH_MSC_SCSI_RequestSense &rArr; USBH_MSC_BOT_Process &rArr; USBH_MSC_BOT_REQ_Reset &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_RdWrProcess
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Process
</UL>

<P><STRONG><a name="[156]"></a>USBH_MSC_SCSI_TestUnitReady</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, usbh_msc_scsi.o(i.USBH_MSC_SCSI_TestUnitReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = USBH_MSC_SCSI_TestUnitReady &rArr; USBH_MSC_BOT_Process &rArr; USBH_MSC_BOT_REQ_Reset &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Process
</UL>

<P><STRONG><a name="[15b]"></a>USBH_MSC_SCSI_Write</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, usbh_msc_scsi.o(i.USBH_MSC_SCSI_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = USBH_MSC_SCSI_Write &rArr; USBH_MSC_BOT_Process &rArr; USBH_MSC_BOT_REQ_Reset &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Write
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_RdWrProcess
</UL>

<P><STRONG><a name="[164]"></a>USBH_MSC_UnitIsReady</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, usbh_msc.o(i.USBH_MSC_UnitIsReady))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_status
</UL>

<P><STRONG><a name="[15d]"></a>USBH_MSC_Write</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, usbh_msc.o(i.USBH_MSC_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = USBH_MSC_Write &rArr; USBH_MSC_RdWrProcess &rArr; USBH_MSC_SCSI_Write &rArr; USBH_MSC_BOT_Process &rArr; USBH_MSC_BOT_REQ_Reset &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_Write
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_RdWrProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_write
</UL>

<P><STRONG><a name="[13b]"></a>USBH_OpenPipe</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, usbh_pipes.o(i.USBH_OpenPipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = USBH_OpenPipe &rArr; USBH_LL_OpenPipe &rArr; HAL_HCD_HC_Init &rArr; USB_HC_Init &rArr; USB_GetHostSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_OpenPipe
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_InterfaceInit
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[119]"></a>USBH_Process</STRONG> (Thumb, 624 bytes, Stack size 32 bytes, usbh_core.o(i.USBH_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = USBH_Process &rArr; USBH_HandleEnum &rArr; USBH_Get_StringDesc &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Start
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_ResetPort
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_GetSpeed
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Delay
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Start
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetFeature
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetCfg
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OpenPipe
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AllocPipe
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeInitStateMachine
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_HOST_Process
</UL>

<P><STRONG><a name="[116]"></a>USBH_RegisterClass</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, usbh_core.o(i.USBH_RegisterClass))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_HOST_Init
</UL>

<P><STRONG><a name="[153]"></a>USBH_SelectInterface</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usbh_core.o(i.USBH_SelectInterface))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_InterfaceInit
</UL>

<P><STRONG><a name="[13c]"></a>USBH_SetAddress</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usbh_ctlreq.o(i.USBH_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = USBH_SetAddress &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[161]"></a>USBH_SetCfg</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usbh_ctlreq.o(i.USBH_SetCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = USBH_SetCfg &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[162]"></a>USBH_SetFeature</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usbh_ctlreq.o(i.USBH_SetFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = USBH_SetFeature &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[117]"></a>USBH_Start</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbh_core.o(i.USBH_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBH_Start &rArr; USBH_LL_Start &rArr; HAL_HCD_Start &rArr; USB_DriveVbus
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Start
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_DriverVBUS
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_HOST_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[75]"></a>USBH_initialize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbh_diskio.o(i.USBH_initialize))
<BR>[Address Reference Count : 1]<UL><LI> usbh_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[79]"></a>USBH_ioctl</STRONG> (Thumb, 108 bytes, Stack size 64 bytes, usbh_diskio.o(i.USBH_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = USBH_ioctl &rArr; USBH_MSC_GetLUNInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_GetLUNInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[77]"></a>USBH_read</STRONG> (Thumb, 62 bytes, Stack size 72 bytes, usbh_diskio.o(i.USBH_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = USBH_read &rArr; USBH_MSC_Read &rArr; USBH_MSC_RdWrProcess &rArr; USBH_MSC_SCSI_Write &rArr; USBH_MSC_BOT_Process &rArr; USBH_MSC_BOT_REQ_Reset &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Read
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_GetLUNInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[76]"></a>USBH_status</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usbh_diskio.o(i.USBH_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_status
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_UnitIsReady
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[78]"></a>USBH_write</STRONG> (Thumb, 70 bytes, Stack size 72 bytes, usbh_diskio.o(i.USBH_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = USBH_write &rArr; USBH_MSC_Write &rArr; USBH_MSC_RdWrProcess &rArr; USBH_MSC_SCSI_Write &rArr; USBH_MSC_BOT_Process &rArr; USBH_MSC_BOT_REQ_Reset &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Write
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_GetLUNInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[d0]"></a>USB_CoreInit</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32l4xx_ll_usb.o(i.USB_CoreInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_CoreInit
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Init
</UL>

<P><STRONG><a name="[ce]"></a>USB_DisableGlobalInt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l4xx_ll_usb.o(i.USB_DisableGlobalInt))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Init
</UL>

<P><STRONG><a name="[e2]"></a>USB_DriveVbus</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32l4xx_ll_usb.o(i.USB_DriveVbus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_DriveVbus
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Start
</UL>

<P><STRONG><a name="[e3]"></a>USB_EnableGlobalInt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l4xx_ll_usb.o(i.USB_EnableGlobalInt))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Start
</UL>

<P><STRONG><a name="[c4]"></a>USB_FlushRxFifo</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32l4xx_ll_usb.o(i.USB_FlushRxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_FlushRxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StopHost
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostInit
</UL>

<P><STRONG><a name="[c3]"></a>USB_FlushTxFifo</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, stm32l4xx_ll_usb.o(i.USB_FlushTxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_FlushTxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StopHost
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostInit
</UL>

<P><STRONG><a name="[b7]"></a>USB_GetCurrentFrame</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l4xx_ll_usb.o(i.USB_GetCurrentFrame))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_GetCurrentFrame
</UL>

<P><STRONG><a name="[b9]"></a>USB_GetHostSpeed</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32l4xx_ll_usb.o(i.USB_GetHostSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_GetHostSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HC_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_GetCurrentSpeed
</UL>

<P><STRONG><a name="[c1]"></a>USB_GetMode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l4xx_ll_usb.o(i.USB_GetMode))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>

<P><STRONG><a name="[bb]"></a>USB_HC_Halt</STRONG> (Thumb, 196 bytes, Stack size 12 bytes, stm32l4xx_ll_usb.o(i.USB_HC_Halt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_HC_Halt
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_Halt
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_HC_OUT_IRQHandler
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_HC_IN_IRQHandler
</UL>

<P><STRONG><a name="[bd]"></a>USB_HC_Init</STRONG> (Thumb, 238 bytes, Stack size 28 bytes, stm32l4xx_ll_usb.o(i.USB_HC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USB_HC_Init &rArr; USB_GetHostSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetHostSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_Init
</UL>

<P><STRONG><a name="[c9]"></a>USB_HC_ReadInterrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l4xx_ll_usb.o(i.USB_HC_ReadInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>

<P><STRONG><a name="[bf]"></a>USB_HC_StartXfer</STRONG> (Thumb, 248 bytes, Stack size 20 bytes, stm32l4xx_ll_usb.o(i.USB_HC_StartXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_SubmitRequest
</UL>

<P><STRONG><a name="[d2]"></a>USB_HostInit</STRONG> (Thumb, 128 bytes, Stack size 20 bytes, stm32l4xx_ll_usb.o(i.USB_HostInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_HostInit &rArr; USB_FlushTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushTxFifo
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushRxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Init
</UL>

<P><STRONG><a name="[c5]"></a>USB_InitFSLSPClkSel</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32l4xx_ll_usb.o(i.USB_InitFSLSPClkSel))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Port_IRQHandler
</UL>

<P><STRONG><a name="[c2]"></a>USB_ReadInterrupts</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l4xx_ll_usb.o(i.USB_ReadInterrupts))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>

<P><STRONG><a name="[fc]"></a>USB_ReadPacket</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, stm32l4xx_ll_usb.o(i.USB_ReadPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_ReadPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_RXQLVL_IRQHandler
</UL>

<P><STRONG><a name="[df]"></a>USB_ResetPort</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32l4xx_ll_usb.o(i.USB_ResetPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_ResetPort &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_ResetPort
</UL>

<P><STRONG><a name="[d1]"></a>USB_SetCurrentMode</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, stm32l4xx_ll_usb.o(i.USB_SetCurrentMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_SetCurrentMode &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Init
</UL>

<P><STRONG><a name="[e5]"></a>USB_StopHost</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, stm32l4xx_ll_usb.o(i.USB_StopHost))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USB_StopHost &rArr; USB_FlushTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushTxFifo
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushRxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Stop
</UL>

<P><STRONG><a name="[165]"></a>USB_WritePacket</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32l4xx_ll_usb.o(i.USB_WritePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HC_StartXfer
</UL>

<P><STRONG><a name="[13]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[166]"></a>thread_sleep(unsigned)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uicode.o(i._Z12thread_sleepj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = thread_sleep(unsigned) &rArr; delay_ms &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_ui(void*, int, int, int, EXTERNAL_GFX_OP*)
</UL>

<P><STRONG><a name="[167]"></a>load_resource()</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, uicode.o(i._Z13load_resourcev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = load_resource() &rArr; c_theme::add_color(COLOR_LIST, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_theme::add_color(COLOR_LIST, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_ui(void*, int, int, int, EXTERNAL_GFX_OP*)
</UL>

<P><STRONG><a name="[170]"></a>_assert(const char*, int)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uicode.o(i._Z7_assertPKci))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_surface::get_pixel(int, int, unsigned)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_surface::set_surface(Z_ORDER_LEVEL, c_rect)
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_surface::draw_pixel(int, int, unsigned, unsigned)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_button::on_paint()
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_theme::get_color(COLOR_LIST)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_theme::add_color(COLOR_LIST, unsigned)
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_rect::set_rect(int, int, int, int)
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::connect(c_wnd*, unsigned short, const char*, short, short, short, short, struct_wnd_tree*)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lattice_font_op::get_utf8_code(const char*, unsigned&)
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lattice_font_op::draw_lattice(c_surface*, int, int, int, int, int, const unsigned char*, unsigned, unsigned)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard_button::on_paint()
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_font_operator::get_string_pos(const void*, const void*, c_rect, unsigned, int&, int&)
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wave_buffer::read_wave_data_by_frame(short&, short&, short, unsigned, short)
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wave_ctrl::refresh_wave(unsigned char)
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard::on_key_clicked(int, int)
</UL>

<P><STRONG><a name="[169]"></a>create_ui(void*, int, int, int, EXTERNAL_GFX_OP*)</STRONG> (Thumb, 462 bytes, Stack size 88 bytes, uicode.o(i._Z9create_uiPviiiP15EXTERNAL_GFX_OP))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = create_ui(void*, int, int, int, EXTERNAL_GFX_OP*) &rArr; c_wave_ctrl::refresh_wave(unsigned char) &rArr; c_wave_ctrl::restore_background() &rArr; c_wnd::get_screen_rect(c_rect&) const &rArr; c_wnd::get_wnd_rect(c_rect&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_surface::c_surface(unsigned, unsigned, unsigned, Z_ORDER_LEVEL, c_rect)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_display::c_display(void*, int, int, c_surface*)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_rect::c_rect()
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::connect(c_wnd*, unsigned short, const char*, short, short, short, short, struct_wnd_tree*)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::show_window()
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wave_buffer::write_wave_data(short)
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wave_ctrl::refresh_wave(unsigned char)
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_resource()
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_sleep(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startHelloWave
</UL>

<P><STRONG><a name="[7a]"></a>c_keyboard::on_key_clicked(int, int)</STRONG> (Thumb, 266 bytes, Stack size 8 bytes, uicode.o(i._ZN10c_keyboard14on_key_clickedEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = c_keyboard::on_key_clicked(int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert(const char*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uicode.o(.constdata)
</UL>
<P><STRONG><a name="[80]"></a>c_keyboard::pre_create_wnd()</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, uicode.o(i._ZN10c_keyboard14pre_create_wndEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = c_keyboard::pre_create_wnd()
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uicode.o(.constdata__ZTV10c_keyboard)
</UL>
<P><STRONG><a name="[7d]"></a>c_keyboard::on_init_children()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, uicode.o(i._ZN10c_keyboard16on_init_childrenEv))
<BR>[Address Reference Count : 1]<UL><LI> uicode.o(.constdata__ZTV10c_keyboard)
</UL>
<P><STRONG><a name="[7e]"></a>c_keyboard::on_paint()</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, uicode.o(i._ZN10c_keyboard8on_paintEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = c_keyboard::on_paint() &rArr; c_wnd::get_screen_rect(c_rect&) const &rArr; c_wnd::get_wnd_rect(c_rect&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::get_screen_rect(c_rect&) const
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_surface::fill_rect(c_rect, unsigned, unsigned)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_rect::c_rect()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uicode.o(.constdata__ZTV10c_keyboard)
</UL>
<P><STRONG><a name="[6f]"></a>c_keyboard::~c_keyboard()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uicode.o(i._ZN10c_keyboardD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> uicode.o(.constdata__ZTV10c_keyboard)
<LI> uicode.o(i.__sti___10_UIcode_cpp_396ac66f)
</UL>
<P><STRONG><a name="[1f4]"></a>c_keyboard::~c_keyboard__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uicode.o(i._ZN10c_keyboardD1Ev), UNUSED)

<P><STRONG><a name="[16f]"></a>c_wave_ctrl::refresh_wave(unsigned char)</STRONG> (Thumb, 256 bytes, Stack size 48 bytes, uicode.o(i._ZN11c_wave_ctrl12refresh_waveEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = c_wave_ctrl::refresh_wave(unsigned char) &rArr; c_wave_ctrl::restore_background() &rArr; c_wnd::get_screen_rect(c_rect&) const &rArr; c_wnd::get_wnd_rect(c_rect&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wave_buffer::read_wave_data_by_frame(short&, short&, short, unsigned, short)
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wave_ctrl::restore_background()
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wave_ctrl::draw_smooth_vline(int, int, int, unsigned)
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert(const char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_ui(void*, int, int, int, EXTERNAL_GFX_OP*)
</UL>

<P><STRONG><a name="[176]"></a>c_wave_ctrl::set_wave_speed(unsigned)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uicode.o(i._ZN11c_wave_ctrl14set_wave_speedEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = c_wave_ctrl::set_wave_speed(unsigned) &rArr; c_wave_ctrl::set_wave_in_out_rate(unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wave_ctrl::set_wave_in_out_rate(unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_myUI::on_init_children()
</UL>

<P><STRONG><a name="[81]"></a>c_wave_ctrl::on_init_children()</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, uicode.o(i._ZN11c_wave_ctrl16on_init_childrenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = c_wave_ctrl::on_init_children() &rArr; c_wnd::get_screen_rect(c_rect&) const &rArr; c_wnd::get_wnd_rect(c_rect&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::get_screen_rect(c_rect&) const
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_rect::c_rect()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uicode.o(.constdata__ZTV11c_wave_ctrl)
</UL>
<P><STRONG><a name="[174]"></a>c_wave_ctrl::draw_smooth_vline(int, int, int, unsigned)</STRONG> (Thumb, 228 bytes, Stack size 56 bytes, uicode.o(i._ZN11c_wave_ctrl17draw_smooth_vlineEiiij))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = c_wave_ctrl::draw_smooth_vline(int, int, int, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wave_ctrl::refresh_wave(unsigned char)
</UL>

<P><STRONG><a name="[175]"></a>c_wave_ctrl::restore_background()</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, uicode.o(i._ZN11c_wave_ctrl18restore_backgroundEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = c_wave_ctrl::restore_background() &rArr; c_wnd::get_screen_rect(c_rect&) const &rArr; c_wnd::get_wnd_rect(c_rect&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::get_screen_rect(c_rect&) const
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_rect::c_rect()
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wave_ctrl::refresh_wave(unsigned char)
</UL>

<P><STRONG><a name="[177]"></a>c_wave_ctrl::set_wave_in_out_rate(unsigned, unsigned)</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, uicode.o(i._ZN11c_wave_ctrl20set_wave_in_out_rateEjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = c_wave_ctrl::set_wave_in_out_rate(unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_myUI::on_init_children()
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wave_ctrl::set_wave_speed(unsigned)
</UL>

<P><STRONG><a name="[82]"></a>c_wave_ctrl::on_paint()</STRONG> (Thumb, 170 bytes, Stack size 56 bytes, uicode.o(i._ZN11c_wave_ctrl8on_paintEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = c_wave_ctrl::on_paint() &rArr; c_wnd::get_screen_rect(c_rect&) const &rArr; c_wnd::get_wnd_rect(c_rect&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::get_screen_rect(c_rect&) const
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_surface::get_pixel(int, int, unsigned)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_surface::fill_rect(c_rect, unsigned, unsigned)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_word::draw_string(c_surface*, int, const void*, int, int, const void*, unsigned, unsigned)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_rect::c_rect()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uicode.o(.constdata__ZTV11c_wave_ctrl)
</UL>
<P><STRONG><a name="[17a]"></a>c_wave_ctrl::c_wave_ctrl()</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, uicode.o(i._ZN11c_wave_ctrlC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = c_wave_ctrl::c_wave_ctrl() &rArr; c_wnd::c_wnd()
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::c_wnd()
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_UIcode_cpp_396ac66f
</UL>

<P><STRONG><a name="[1f5]"></a>c_wave_ctrl::c_wave_ctrl__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, uicode.o(i._ZN11c_wave_ctrlC1Ev), UNUSED)

<P><STRONG><a name="[72]"></a>c_wave_ctrl::~c_wave_ctrl()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uicode.o(i._ZN11c_wave_ctrlD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> uicode.o(.constdata__ZTV11c_wave_ctrl)
<LI> uicode.o(i.__sti___10_UIcode_cpp_396ac66f)
</UL>
<P><STRONG><a name="[1f6]"></a>c_wave_ctrl::~c_wave_ctrl__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uicode.o(i._ZN11c_wave_ctrlD1Ev), UNUSED)

<P><STRONG><a name="[16e]"></a>c_wave_buffer::write_wave_data(short)</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, uicode.o(i._ZN13c_wave_buffer15write_wave_dataEs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = c_wave_buffer::write_wave_data(short)
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_ui(void*, int, int, int, EXTERNAL_GFX_OP*)
</UL>

<P><STRONG><a name="[173]"></a>c_wave_buffer::read_wave_data_by_frame(short&, short&, short, unsigned, short)</STRONG> (Thumb, 292 bytes, Stack size 40 bytes, uicode.o(i._ZN13c_wave_buffer23read_wave_data_by_frameERsS0_sjs))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = c_wave_buffer::read_wave_data_by_frame(short&, short&, short, unsigned, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert(const char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wave_ctrl::refresh_wave(unsigned char)
</UL>

<P><STRONG><a name="[17c]"></a>c_wave_buffer::c_wave_buffer()</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, uicode.o(i._ZN13c_wave_bufferC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = c_wave_buffer::c_wave_buffer()
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_UIcode_cpp_396ac66f
</UL>

<P><STRONG><a name="[1f7]"></a>c_wave_buffer::c_wave_buffer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, uicode.o(i._ZN13c_wave_bufferC1Ev), UNUSED)

<P><STRONG><a name="[17d]"></a>c_font_operator::get_string_pos(const void*, const void*, c_rect, unsigned, int&, int&)</STRONG> (Thumb, 162 bytes, Stack size 48 bytes, uicode.o(i._ZN15c_font_operator14get_string_posEPKvS1_6c_rectjRiS3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = c_font_operator::get_string_pos(const void*, const void*, c_rect, unsigned, int&, int&)
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert(const char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lattice_font_op::draw_string_in_rect(c_surface*, int, const void*, c_rect, const void*, unsigned, unsigned, unsigned)
</UL>

<P><STRONG><a name="[86]"></a>c_surface_no_fb::fill_rect_on_fb(int, int, int, int, unsigned)</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, uicode.o(i._ZN15c_surface_no_fb15fill_rect_on_fbEiiiij))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = c_surface_no_fb::fill_rect_on_fb(int, int, int, int, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uicode.o(.constdata__ZTV15c_surface_no_fb)
</UL>
<P><STRONG><a name="[87]"></a>c_surface_no_fb::draw_pixel_on_fb(int, int, unsigned)</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, uicode.o(i._ZN15c_surface_no_fb16draw_pixel_on_fbEiij))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = c_surface_no_fb::draw_pixel_on_fb(int, int, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uicode.o(.constdata__ZTV15c_surface_no_fb)
</UL>
<P><STRONG><a name="[89]"></a>c_keyboard_button::on_paint()</STRONG> (Thumb, 494 bytes, Stack size 56 bytes, uicode.o(i._ZN17c_keyboard_button8on_paintEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = c_keyboard_button::on_paint() &rArr; c_surface::draw_rect(c_rect, unsigned, unsigned, unsigned) &rArr; c_surface::draw_vline(int, int, int, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::get_screen_rect(c_rect&) const
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_surface::fill_rect(c_rect, unsigned, unsigned)
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_surface::draw_rect(c_rect, unsigned, unsigned, unsigned)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_theme::get_color(COLOR_LIST)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_word::draw_string_in_rect(c_surface*, int, const void*, c_rect, const void*, unsigned, unsigned, unsigned)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_rect::c_rect()
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert(const char*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uicode.o(.constdata__ZTV17c_keyboard_button)
</UL>
<P><STRONG><a name="[181]"></a>c_keyboard_button::c_keyboard_button()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uicode.o(i._ZN17c_keyboard_buttonC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = c_keyboard_button::c_keyboard_button() &rArr; c_button::c_button() &rArr; c_wnd::c_wnd()
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_button::c_button()
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_UIcode_cpp_396ac66f
</UL>

<P><STRONG><a name="[1f8]"></a>c_keyboard_button::c_keyboard_button__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, uicode.o(i._ZN17c_keyboard_buttonC1Ev), UNUSED)

<P><STRONG><a name="[70]"></a>c_keyboard_button::~c_keyboard_button()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uicode.o(i._ZN17c_keyboard_buttonD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> uicode.o(.constdata__ZTV17c_keyboard_button)
<LI> uicode.o(i.__sti___10_UIcode_cpp_396ac66f)
</UL>
<P><STRONG><a name="[1f9]"></a>c_keyboard_button::~c_keyboard_button__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uicode.o(i._ZN17c_keyboard_buttonD1Ev), UNUSED)

<P><STRONG><a name="[8b]"></a>c_lattice_font_op::draw_string(c_surface*, int, const void*, int, int, const void*, unsigned, unsigned)</STRONG> (Thumb, 80 bytes, Stack size 80 bytes, uicode.o(i._ZN17c_lattice_font_op11draw_stringEP9c_surfaceiPKviiS3_jj))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = c_lattice_font_op::draw_string(c_surface*, int, const void*, int, int, const void*, unsigned, unsigned) &rArr; c_lattice_font_op::draw_single_char(c_surface*, int, unsigned, int, int, const struct_lattice_font_info*, unsigned, unsigned) &rArr; c_lattice_font_op::draw_lattice(c_surface*, int, int, int, int, int, const unsigned char*, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lattice_font_op::draw_single_char(c_surface*, int, unsigned, int, int, const struct_lattice_font_info*, unsigned, unsigned)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lattice_font_op::get_utf8_code(const char*, unsigned&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uicode.o(.constdata__ZTV17c_lattice_font_op)
</UL>
<P><STRONG><a name="[186]"></a>c_lattice_font_op::get_lattice(const struct_lattice_font_info*, unsigned)</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, uicode.o(i._ZN17c_lattice_font_op11get_latticeEPK24struct_lattice_font_infoj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = c_lattice_font_op::get_lattice(const struct_lattice_font_info*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lattice_font_op::draw_single_char(c_surface*, int, unsigned, int, int, const struct_lattice_font_info*, unsigned, unsigned)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lattice_font_op::get_str_size(const void*, const void*, int&, int&)
</UL>

<P><STRONG><a name="[185]"></a>c_lattice_font_op::draw_lattice(c_surface*, int, int, int, int, int, const unsigned char*, unsigned, unsigned)</STRONG> (Thumb, 288 bytes, Stack size 112 bytes, uicode.o(i._ZN17c_lattice_font_op12draw_latticeEP9c_surfaceiiiiiPKhjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = c_lattice_font_op::draw_lattice(c_surface*, int, int, int, int, int, const unsigned char*, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert(const char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lattice_font_op::draw_single_char(c_surface*, int, unsigned, int, int, const struct_lattice_font_info*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[8d]"></a>c_lattice_font_op::get_str_size(const void*, const void*, int&, int&)</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, uicode.o(i._ZN17c_lattice_font_op12get_str_sizeEPKvS1_RiS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = c_lattice_font_op::get_str_size(const void*, const void*, int&, int&) &rArr; c_lattice_font_op::get_lattice(const struct_lattice_font_info*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lattice_font_op::get_utf8_code(const char*, unsigned&)
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lattice_font_op::get_lattice(const struct_lattice_font_info*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uicode.o(.constdata__ZTV17c_lattice_font_op)
</UL>
<P><STRONG><a name="[183]"></a>c_lattice_font_op::get_utf8_code(const char*, unsigned&)</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, uicode.o(i._ZN17c_lattice_font_op13get_utf8_codeEPKcRj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = c_lattice_font_op::get_utf8_code(const char*, unsigned&)
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert(const char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lattice_font_op::get_str_size(const void*, const void*, int&, int&)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lattice_font_op::draw_string(c_surface*, int, const void*, int, int, const void*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[184]"></a>c_lattice_font_op::draw_single_char(c_surface*, int, unsigned, int, int, const struct_lattice_font_info*, unsigned, unsigned)</STRONG> (Thumb, 188 bytes, Stack size 80 bytes, uicode.o(i._ZN17c_lattice_font_op16draw_single_charEP9c_surfaceijiiPK24struct_lattice_font_infojj))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = c_lattice_font_op::draw_single_char(c_surface*, int, unsigned, int, int, const struct_lattice_font_info*, unsigned, unsigned) &rArr; c_lattice_font_op::draw_lattice(c_surface*, int, int, int, int, int, const unsigned char*, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lattice_font_op::draw_lattice(c_surface*, int, int, int, int, int, const unsigned char*, unsigned, unsigned)
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lattice_font_op::get_lattice(const struct_lattice_font_info*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lattice_font_op::draw_string(c_surface*, int, const void*, int, int, const void*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[8c]"></a>c_lattice_font_op::draw_string_in_rect(c_surface*, int, const void*, c_rect, const void*, unsigned, unsigned, unsigned)</STRONG> (Thumb, 104 bytes, Stack size 88 bytes, uicode.o(i._ZN17c_lattice_font_op19draw_string_in_rectEP9c_surfaceiPKv6c_rectS3_jjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = c_lattice_font_op::draw_string_in_rect(c_surface*, int, const void*, c_rect, const void*, unsigned, unsigned, unsigned) &rArr; c_font_operator::get_string_pos(const void*, const void*, c_rect, unsigned, int&, int&)
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_font_operator::get_string_pos(const void*, const void*, c_rect, unsigned, int&, int&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uicode.o(.constdata__ZTV17c_lattice_font_op)
</UL>
<P><STRONG><a name="[7f]"></a>c_wnd::show_window()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, uicode.o(i._ZN5c_wnd11show_windowEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = c_wnd::show_window()
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_ui(void*, int, int, int, EXTERNAL_GFX_OP*)
</UL>
<BR>[Address Reference Count : 6]<UL><LI> uicode.o(.constdata__ZTV5c_wnd)
<LI> uicode.o(.constdata__ZTV8c_button)
<LI> uicode.o(.constdata__ZTV10c_keyboard)
<LI> uicode.o(.constdata__ZTV17c_keyboard_button)
<LI> uicode.o(.constdata__ZTV11c_wave_ctrl)
<LI> uicode.o(.constdata__ZTV6c_myUI)
</UL>
<P><STRONG><a name="[83]"></a>c_wnd::pre_create_wnd()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uicode.o(i._ZN5c_wnd14pre_create_wndEv))
<BR>[Address Reference Count : 3]<UL><LI> uicode.o(.constdata__ZTV5c_wnd)
<LI> uicode.o(.constdata__ZTV11c_wave_ctrl)
<LI> uicode.o(.constdata__ZTV6c_myUI)
</UL>
<P><STRONG><a name="[88]"></a>c_wnd::on_init_children()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uicode.o(i._ZN5c_wnd16on_init_childrenEv))
<BR>[Address Reference Count : 3]<UL><LI> uicode.o(.constdata__ZTV5c_wnd)
<LI> uicode.o(.constdata__ZTV8c_button)
<LI> uicode.o(.constdata__ZTV17c_keyboard_button)
</UL>
<P><STRONG><a name="[7c]"></a>c_wnd::connect(c_wnd*, unsigned short, const char*, short, short, short, short, struct_wnd_tree*)</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, uicode.o(i._ZN5c_wnd7connectEPS_tPKcssssP15struct_wnd_tree))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = c_wnd::connect(c_wnd*, unsigned short, const char*, short, short, short, short, struct_wnd_tree*)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::get_last_child() const
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::get_wnd_ptr(unsigned short) const
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert(const char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_ui(void*, int, int, int, EXTERNAL_GFX_OP*)
</UL>
<BR>[Address Reference Count : 6]<UL><LI> uicode.o(.constdata__ZTV5c_wnd)
<LI> uicode.o(.constdata__ZTV8c_button)
<LI> uicode.o(.constdata__ZTV10c_keyboard)
<LI> uicode.o(.constdata__ZTV17c_keyboard_button)
<LI> uicode.o(.constdata__ZTV11c_wave_ctrl)
<LI> uicode.o(.constdata__ZTV6c_myUI)
</UL>
<P><STRONG><a name="[8e]"></a>c_wnd::on_paint()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uicode.o(i._ZN5c_wnd8on_paintEv))
<BR>[Address Reference Count : 1]<UL><LI> uicode.o(.constdata__ZTV5c_wnd)
</UL>
<P><STRONG><a name="[17b]"></a>c_wnd::c_wnd()</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, uicode.o(i._ZN5c_wndC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = c_wnd::c_wnd()
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_rect::c_rect()
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_button::c_button()
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wave_ctrl::c_wave_ctrl()
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_UIcode_cpp_396ac66f
</UL>

<P><STRONG><a name="[1fa]"></a>c_wnd::c_wnd__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, uicode.o(i._ZN5c_wndC1Ev), UNUSED)

<P><STRONG><a name="[7b]"></a>c_myUI::on_clicked(int, int)</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, uicode.o(i._ZN6c_myUI10on_clickedEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = c_myUI::on_clicked(int, int) &rArr; c_wnd::get_screen_rect(c_rect&) const &rArr; c_wnd::get_wnd_rect(c_rect&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::get_screen_rect(c_rect&) const
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::get_wnd_ptr(unsigned short) const
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_rect::c_rect()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uicode.o(.constdata)
</UL>
<P><STRONG><a name="[8f]"></a>c_myUI::on_init_children()</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, uicode.o(i._ZN6c_myUI16on_init_childrenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = c_myUI::on_init_children() &rArr; c_wave_ctrl::set_wave_in_out_rate(unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::get_wnd_ptr(unsigned short) const
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wave_ctrl::set_wave_in_out_rate(unsigned, unsigned)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wave_ctrl::set_wave_speed(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uicode.o(.constdata__ZTV6c_myUI)
</UL>
<P><STRONG><a name="[90]"></a>c_myUI::on_paint()</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, uicode.o(i._ZN6c_myUI8on_paintEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = c_myUI::on_paint() &rArr; c_wnd::get_screen_rect(c_rect&) const &rArr; c_wnd::get_wnd_rect(c_rect&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::get_screen_rect(c_rect&) const
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_surface::fill_rect(c_rect, unsigned, unsigned)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_rect::c_rect()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uicode.o(.constdata__ZTV6c_myUI)
</UL>
<P><STRONG><a name="[71]"></a>c_myUI::~c_myUI()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uicode.o(i._ZN6c_myUID1Ev))
<BR>[Address Reference Count : 2]<UL><LI> uicode.o(.constdata__ZTV6c_myUI)
<LI> uicode.o(i.__sti___10_UIcode_cpp_396ac66f)
</UL>
<P><STRONG><a name="[1fb]"></a>c_myUI::~c_myUI__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uicode.o(i._ZN6c_myUID1Ev), UNUSED)

<P><STRONG><a name="[189]"></a>c_rect::set_rect(int, int, int, int)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, uicode.o(i._ZN6c_rect8set_rectEiiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = c_rect::set_rect(int, int, int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert(const char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::get_screen_rect(c_rect&) const
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_surface::c_surface(unsigned, unsigned, unsigned, Z_ORDER_LEVEL, c_rect)
</UL>

<P><STRONG><a name="[16b]"></a>c_rect::c_rect()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uicode.o(i._ZN6c_rectC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::get_screen_rect(c_rect&) const
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_surface::c_surface(unsigned, unsigned, unsigned, Z_ORDER_LEVEL, c_rect)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_button::on_paint()
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_layer::c_layer()
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_myUI::on_paint()
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_myUI::on_clicked(int, int)
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::c_wnd()
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard_button::on_paint()
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wave_ctrl::on_paint()
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wave_ctrl::restore_background()
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wave_ctrl::on_init_children()
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard::on_paint()
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_ui(void*, int, int, int, EXTERNAL_GFX_OP*)
</UL>

<P><STRONG><a name="[1fc]"></a>c_rect::c_rect__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uicode.o(i._ZN6c_rectC1Ev), UNUSED)

<P><STRONG><a name="[178]"></a>c_word::draw_string(c_surface*, int, const void*, int, int, const void*, unsigned, unsigned)</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, uicode.o(i._ZN6c_word11draw_stringEP9c_surfaceiPKviiS3_jj))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = c_word::draw_string(c_surface*, int, const void*, int, int, const void*, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wave_ctrl::on_paint()
</UL>

<P><STRONG><a name="[180]"></a>c_word::draw_string_in_rect(c_surface*, int, const void*, c_rect, const void*, unsigned, unsigned, unsigned)</STRONG> (Thumb, 60 bytes, Stack size 64 bytes, uicode.o(i._ZN6c_word19draw_string_in_rectEP9c_surfaceiPKv6c_rectS3_jjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = c_word::draw_string_in_rect(c_surface*, int, const void*, c_rect, const void*, unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_button::on_paint()
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard_button::on_paint()
</UL>

<P><STRONG><a name="[6c]"></a>c_layer::c_layer()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, uicode.o(i._ZN7c_layerC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = c_layer::c_layer()
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_rect::c_rect()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uicode.o(i._ZN9c_surfaceC1Ejjj13Z_ORDER_LEVEL6c_rect)
</UL>
<P><STRONG><a name="[1fd]"></a>c_layer::c_layer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, uicode.o(i._ZN7c_layerC1Ev), UNUSED)

<P><STRONG><a name="[168]"></a>c_theme::add_color(COLOR_LIST, unsigned)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, uicode.o(i._ZN7c_theme9add_colorE10COLOR_LISTj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = c_theme::add_color(COLOR_LIST, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert(const char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_resource()
</UL>

<P><STRONG><a name="[17e]"></a>c_theme::get_color(COLOR_LIST)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, uicode.o(i._ZN7c_theme9get_colorE10COLOR_LIST))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = c_theme::get_color(COLOR_LIST)
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert(const char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_button::on_paint()
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_button::pre_create_wnd()
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard_button::on_paint()
</UL>

<P><STRONG><a name="[8a]"></a>c_button::pre_create_wnd()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, uicode.o(i._ZN8c_button14pre_create_wndEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = c_button::pre_create_wnd() &rArr; c_theme::get_color(COLOR_LIST)
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_theme::get_color(COLOR_LIST)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> uicode.o(.constdata__ZTV8c_button)
<LI> uicode.o(.constdata__ZTV17c_keyboard_button)
</UL>
<P><STRONG><a name="[91]"></a>c_button::on_paint()</STRONG> (Thumb, 238 bytes, Stack size 56 bytes, uicode.o(i._ZN8c_button8on_paintEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = c_button::on_paint() &rArr; c_surface::draw_rect(c_rect, unsigned, unsigned, unsigned) &rArr; c_surface::draw_vline(int, int, int, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::get_screen_rect(c_rect&) const
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_surface::fill_rect(c_rect, unsigned, unsigned)
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_surface::draw_rect(c_rect, unsigned, unsigned, unsigned)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_theme::get_color(COLOR_LIST)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_word::draw_string_in_rect(c_surface*, int, const void*, c_rect, const void*, unsigned, unsigned, unsigned)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_rect::c_rect()
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert(const char*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uicode.o(.constdata__ZTV8c_button)
</UL>
<P><STRONG><a name="[182]"></a>c_button::c_button()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uicode.o(i._ZN8c_buttonC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = c_button::c_button() &rArr; c_wnd::c_wnd()
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::c_wnd()
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard_button::c_keyboard_button()
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_UIcode_cpp_396ac66f
</UL>

<P><STRONG><a name="[1fe]"></a>c_button::c_button__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, uicode.o(i._ZN8c_buttonC1Ev), UNUSED)

<P><STRONG><a name="[73]"></a>c_button::~c_button()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uicode.o(i._ZN8c_buttonD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> uicode.o(.constdata__ZTV8c_button)
<LI> uicode.o(i.__sti___10_UIcode_cpp_396ac66f)
</UL>
<P><STRONG><a name="[1ff]"></a>c_button::~c_button__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uicode.o(i._ZN8c_buttonD1Ev), UNUSED)

<P><STRONG><a name="[16d]"></a>c_display::c_display(void*, int, int, c_surface*)</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, uicode.o(i._ZN9c_displayC1EPviiP9c_surface))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = c_display::c_display(void*, int, int, c_surface*)
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_ui(void*, int, int, int, EXTERNAL_GFX_OP*)
</UL>

<P><STRONG><a name="[200]"></a>c_display::c_display__sub_object(void*, int, int, c_surface*)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, uicode.o(i._ZN9c_displayC1EPviiP9c_surface), UNUSED)

<P><STRONG><a name="[18c]"></a>c_surface::draw_hline(int, int, int, unsigned, unsigned)</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, uicode.o(i._ZN9c_surface10draw_hlineEiiijj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = c_surface::draw_hline(int, int, int, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_surface::fill_rect(int, int, int, int, unsigned, unsigned)
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_surface::draw_rect(c_rect, unsigned, unsigned, unsigned)
</UL>

<P><STRONG><a name="[84]"></a>c_surface::draw_pixel(int, int, unsigned, unsigned)</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, uicode.o(i._ZN9c_surface10draw_pixelEiijj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = c_surface::draw_pixel(int, int, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_rect::pt_in_rect(int, int) const
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert(const char*, int)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> uicode.o(.constdata__ZTV9c_surface)
<LI> uicode.o(.constdata__ZTV15c_surface_no_fb)
</UL>
<P><STRONG><a name="[18d]"></a>c_surface::draw_vline(int, int, int, unsigned, unsigned)</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, uicode.o(i._ZN9c_surface10draw_vlineEiiijj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = c_surface::draw_vline(int, int, int, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_surface::draw_rect(c_rect, unsigned, unsigned, unsigned)
</UL>

<P><STRONG><a name="[18b]"></a>c_surface::set_surface(Z_ORDER_LEVEL, c_rect)</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, uicode.o(i._ZN9c_surface11set_surfaceE13Z_ORDER_LEVEL6c_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = c_surface::set_surface(Z_ORDER_LEVEL, c_rect) &rArr; calloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert(const char*, int)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_surface::c_surface(unsigned, unsigned, unsigned, Z_ORDER_LEVEL, c_rect)
</UL>

<P><STRONG><a name="[92]"></a>c_surface::fill_rect_on_fb(int, int, int, int, unsigned)</STRONG> (Thumb, 214 bytes, Stack size 36 bytes, uicode.o(i._ZN9c_surface15fill_rect_on_fbEiiiij))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = c_surface::fill_rect_on_fb(int, int, int, int, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uicode.o(.constdata__ZTV9c_surface)
</UL>
<P><STRONG><a name="[93]"></a>c_surface::draw_pixel_on_fb(int, int, unsigned)</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, uicode.o(i._ZN9c_surface16draw_pixel_on_fbEiij))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = c_surface::draw_pixel_on_fb(int, int, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uicode.o(.constdata__ZTV9c_surface)
</UL>
<P><STRONG><a name="[17f]"></a>c_surface::draw_rect(c_rect, unsigned, unsigned, unsigned)</STRONG> (Thumb, 122 bytes, Stack size 64 bytes, uicode.o(i._ZN9c_surface9draw_rectE6c_rectjjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = c_surface::draw_rect(c_rect, unsigned, unsigned, unsigned) &rArr; c_surface::draw_vline(int, int, int, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_surface::draw_vline(int, int, int, unsigned, unsigned)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_surface::draw_hline(int, int, int, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_button::on_paint()
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard_button::on_paint()
</UL>

<P><STRONG><a name="[172]"></a>c_surface::fill_rect(c_rect, unsigned, unsigned)</STRONG> (Thumb, 20 bytes, Stack size 32 bytes, uicode.o(i._ZN9c_surface9fill_rectE6c_rectjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = c_surface::fill_rect(c_rect, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_button::on_paint()
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_myUI::on_paint()
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard_button::on_paint()
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wave_ctrl::on_paint()
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard::on_paint()
</UL>

<P><STRONG><a name="[85]"></a>c_surface::fill_rect(int, int, int, int, unsigned, unsigned)</STRONG> (Thumb, 260 bytes, Stack size 64 bytes, uicode.o(i._ZN9c_surface9fill_rectEiiiijj))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = c_surface::fill_rect(int, int, int, int, unsigned, unsigned) &rArr; c_surface::draw_hline(int, int, int, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_rect::pt_in_rect(int, int) const
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_surface::draw_hline(int, int, int, unsigned, unsigned)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> uicode.o(.constdata__ZTV9c_surface)
<LI> uicode.o(.constdata__ZTV15c_surface_no_fb)
</UL>
<P><STRONG><a name="[179]"></a>c_surface::get_pixel(int, int, unsigned)</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, uicode.o(i._ZN9c_surface9get_pixelEiij))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = c_surface::get_pixel(int, int, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert(const char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wave_ctrl::on_paint()
</UL>

<P><STRONG><a name="[16c]"></a>c_surface::c_surface(unsigned, unsigned, unsigned, Z_ORDER_LEVEL, c_rect)</STRONG> (Thumb, 148 bytes, Stack size 80 bytes, uicode.o(i._ZN9c_surfaceC1Ejjj13Z_ORDER_LEVEL6c_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = c_surface::c_surface(unsigned, unsigned, unsigned, Z_ORDER_LEVEL, c_rect) &rArr; c_surface::set_surface(Z_ORDER_LEVEL, c_rect) &rArr; calloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_surface::set_surface(Z_ORDER_LEVEL, c_rect)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_rect::c_rect()
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_rect::set_rect(int, int, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_ui(void*, int, int, int, EXTERNAL_GFX_OP*)
</UL>

<P><STRONG><a name="[201]"></a>c_surface::c_surface__sub_object(unsigned, unsigned, unsigned, Z_ORDER_LEVEL, c_rect)</STRONG> (Thumb, 0 bytes, Stack size 80 bytes, uicode.o(i._ZN9c_surfaceC1Ejjj13Z_ORDER_LEVEL6c_rect), UNUSED)

<P><STRONG><a name="[187]"></a>c_wnd::get_wnd_ptr(unsigned short) const</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uicode.o(i._ZNK5c_wnd11get_wnd_ptrEt))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_myUI::on_init_children()
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_myUI::on_clicked(int, int)
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::connect(c_wnd*, unsigned short, const char*, short, short, short, short, struct_wnd_tree*)
</UL>

<P><STRONG><a name="[18f]"></a>c_wnd::get_wnd_rect(c_rect&) const</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uicode.o(i._ZNK5c_wnd12get_wnd_rectER6c_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = c_wnd::get_wnd_rect(c_rect&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::get_screen_rect(c_rect&) const
</UL>

<P><STRONG><a name="[188]"></a>c_wnd::get_last_child() const</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uicode.o(i._ZNK5c_wnd14get_last_childEv))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::connect(c_wnd*, unsigned short, const char*, short, short, short, short, struct_wnd_tree*)
</UL>

<P><STRONG><a name="[171]"></a>c_wnd::get_screen_rect(c_rect&) const</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, uicode.o(i._ZNK5c_wnd15get_screen_rectER6c_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = c_wnd::get_screen_rect(c_rect&) const &rArr; c_wnd::get_wnd_rect(c_rect&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::get_wnd_rect(c_rect&) const
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_rect::c_rect()
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_rect::set_rect(int, int, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_button::on_paint()
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_myUI::on_paint()
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_myUI::on_clicked(int, int)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard_button::on_paint()
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wave_ctrl::on_paint()
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wave_ctrl::restore_background()
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wave_ctrl::on_init_children()
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard::on_paint()
</UL>

<P><STRONG><a name="[18a]"></a>c_rect::pt_in_rect(int, int) const</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, uicode.o(i._ZNK6c_rect10pt_in_rectEii))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_surface::fill_rect(int, int, int, int, unsigned, unsigned)
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_surface::draw_pixel(int, int, unsigned, unsigned)
</UL>

<P><STRONG><a name="[190]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[202]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[1c2]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_port_output
</UL>

<P><STRONG><a name="[203]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[204]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[192]"></a>__0snprintf</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[205]"></a>__1snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[1be]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
</UL>

<P><STRONG><a name="[206]"></a>__c89snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[207]"></a>snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[193]"></a>__0vsnprintf</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[208]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[209]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[20a]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[1bf]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
</UL>

<P><STRONG><a name="[18e]"></a>__aeabi_vec_ctor_nocookie_nodtor</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, aeabi_vec_ctor_nocookie_nodtor.o(i.__aeabi_vec_ctor_nocookie_nodtor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_surface::c_surface(unsigned, unsigned, unsigned, Z_ORDER_LEVEL, c_rect)
</UL>

<P><STRONG><a name="[16a]"></a>__cxa_guard_acquire</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cxa_guard_acquire.o(i.__cxa_guard_acquire))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_ui(void*, int, int, int, EXTERNAL_GFX_OP*)
</UL>

<P><STRONG><a name="[20b]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[20c]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[20d]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[106]"></a>delay_ms</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, delay.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = delay_ms &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Gpio_Init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_sleep(unsigned)
</UL>

<P><STRONG><a name="[1a3]"></a>delay_us</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, delay.o(i.delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[1da]"></a>disk_initialize</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, diskio.o(i.disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[1de]"></a>disk_ioctl</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, diskio.o(i.disk_ioctl))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[1d4]"></a>disk_read</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, diskio.o(i.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[1d9]"></a>disk_status</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, diskio.o(i.disk_status))
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[1d5]"></a>disk_write</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, diskio.o(i.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[1ad]"></a>elog_get_filter_tag_lvl</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, elog.o(i.elog_get_filter_tag_lvl))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + In Cycle
<LI>Call Chain = elog_get_filter_tag_lvl &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_port_output_lock
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
</UL>

<P><STRONG><a name="[1b2]"></a>elog_init</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, elog.o(i.elog_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = elog_init &rArr; elog_set_filter_lvl &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_port_init
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_set_filter_lvl
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output_lock_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1af]"></a>elog_output</STRONG> (Thumb, 720 bytes, Stack size 96 bytes, elog.o(i.elog_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + In Cycle
<LI>Call Chain = elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fmt_enabled
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_strcpy
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_port_output
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_port_get_time
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_port_get_t_info
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_port_get_p_info
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output_unlock
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output_lock
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_get_filter_tag_lvl
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_start
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_set_fmt
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_elog
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fmt_enabled
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_strcpy
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_set_filter_lvl
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_get_filter_tag_lvl
</UL>

<P><STRONG><a name="[1b8]"></a>elog_output_lock</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, elog.o(i.elog_output_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = elog_output_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_port_output_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
</UL>

<P><STRONG><a name="[1b4]"></a>elog_output_lock_enabled</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, elog.o(i.elog_output_lock_enabled))
<BR><BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_port_output_unlock
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_port_output_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_init
</UL>

<P><STRONG><a name="[1b1]"></a>elog_output_unlock</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, elog.o(i.elog_output_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = elog_output_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_port_output_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_get_filter_tag_lvl
</UL>

<P><STRONG><a name="[1bc]"></a>elog_port_get_p_info</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, elog_port.o(i.elog_port_get_p_info))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
</UL>

<P><STRONG><a name="[1bd]"></a>elog_port_get_t_info</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, elog_port.o(i.elog_port_get_t_info))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
</UL>

<P><STRONG><a name="[1bb]"></a>elog_port_get_time</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, elog_port.o(i.elog_port_get_time))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
</UL>

<P><STRONG><a name="[1b3]"></a>elog_port_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, elog_port.o(i.elog_port_init))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_init
</UL>

<P><STRONG><a name="[1c0]"></a>elog_port_output</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, elog_port.o(i.elog_port_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = elog_port_output &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
</UL>

<P><STRONG><a name="[1ae]"></a>elog_port_output_lock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, elog_port.o(i.elog_port_output_lock))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output_lock_enabled
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output_lock
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_get_filter_tag_lvl
</UL>

<P><STRONG><a name="[1c1]"></a>elog_port_output_unlock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, elog_port.o(i.elog_port_output_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output_unlock
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output_lock_enabled
</UL>

<P><STRONG><a name="[1b5]"></a>elog_set_filter_lvl</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, elog.o(i.elog_set_filter_lvl))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = elog_set_filter_lvl &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_init
</UL>

<P><STRONG><a name="[1c3]"></a>elog_set_fmt</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, elog.o(i.elog_set_fmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = elog_set_fmt &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1db]"></a>elog_set_text_color_enabled</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, elog.o(i.elog_set_text_color_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c4]"></a>elog_start</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, elog.o(i.elog_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = elog_start &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b9]"></a>elog_strcpy</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, elog_utils.o(i.elog_strcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = elog_strcpy &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
</UL>

<P><STRONG><a name="[10e]"></a>f_close</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ff.o(i.f_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = f_close &rArr; f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_lock
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_Application
</UL>

<P><STRONG><a name="[10b]"></a>f_mount</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, ff.o(i.f_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_Application
</UL>

<P><STRONG><a name="[10c]"></a>f_open</STRONG> (Thumb, 528 bytes, Stack size 96 bytes, ff.o(i.f_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inc_lock
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enq_lock
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_lock
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_Application
</UL>

<P><STRONG><a name="[1c5]"></a>f_sync</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, ff.o(i.f_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[10d]"></a>f_write</STRONG> (Thumb, 452 bytes, Stack size 40 bytes, ff.o(i.f_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_Application
</UL>

<P><STRONG><a name="[6d]"></a>fputc</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bsp.o(i.fputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[a7]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_InterfaceDeInit
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[1ce]"></a>get_fattime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fatfs.o(i.get_fattime))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[74]"></a>gfx_draw_pixel</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, main.o(i.gfx_draw_pixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = gfx_draw_pixel &rArr; LCD_Draw_ColorPoint &rArr; LCD_Address_Set &rArr; LCD_Write_Data &rArr; LCD_SPI_Send &rArr; SPI3_WriteByte &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Draw_ColorPoint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[68]"></a>main</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = main &rArr; MX_USB_HOST_Init &rArr; USBH_Init &rArr; USBH_LL_Init &rArr; HAL_HCD_Init &rArr; HAL_HCD_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startHelloWave
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_start
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_set_text_color_enabled
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_set_fmt
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_HOST_Process
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_HOST_Init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FATFS_Init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_elog
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_Application
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[a2]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_InterfaceInit
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>

<P><STRONG><a name="[1dd]"></a>startHelloWave</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uicode.o(i.startHelloWave))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = startHelloWave &rArr; create_ui(void*, int, int, int, EXTERNAL_GFX_OP*) &rArr; c_wave_ctrl::refresh_wave(unsigned char) &rArr; c_wave_ctrl::restore_background() &rArr; c_wnd::get_screen_rect(c_rect&) const &rArr; c_wnd::get_wnd_rect(c_rect&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_ui(void*, int, int, int, EXTERNAL_GFX_OP*)
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1dc]"></a>test_elog</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, main.o(i.test_elog))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = test_elog &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[10a]"></a>MSC_Application</STRONG> (Thumb, 80 bytes, Stack size 56 bytes, main.o(i.MSC_Application))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = MSC_Application &rArr; f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[105]"></a>LCD_Gpio_Init</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, lcd.o(i.LCD_Gpio_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LCD_Gpio_Init &rArr; SPI3_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[102]"></a>LCD_SPI_Send</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, lcd.o(i.LCD_SPI_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LCD_SPI_Send &rArr; SPI3_WriteByte &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_HalfWord
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_Data
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_Cmd
</UL>

<P><STRONG><a name="[fe]"></a>LCD_Write_Cmd</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lcd.o(i.LCD_Write_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LCD_Write_Cmd &rArr; LCD_SPI_Send &rArr; SPI3_WriteByte &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SPI_Send
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[ff]"></a>LCD_Write_Data</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lcd.o(i.LCD_Write_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LCD_Write_Data &rArr; LCD_SPI_Send &rArr; SPI3_WriteByte &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SPI_Send
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[ca]"></a>HCD_HC_IN_IRQHandler</STRONG> (Thumb, 486 bytes, Stack size 32 bytes, stm32l4xx_hal_hcd.o(i.HCD_HC_IN_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HCD_HC_IN_IRQHandler &rArr; USB_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HC_Halt
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_NotifyURBChange_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>

<P><STRONG><a name="[cb]"></a>HCD_HC_OUT_IRQHandler</STRONG> (Thumb, 492 bytes, Stack size 32 bytes, stm32l4xx_hal_hcd.o(i.HCD_HC_OUT_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HCD_HC_OUT_IRQHandler &rArr; USB_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HC_Halt
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_NotifyURBChange_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>

<P><STRONG><a name="[c6]"></a>HCD_Port_IRQHandler</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, stm32l4xx_hal_hcd.o(i.HCD_Port_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HCD_Port_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_InitFSLSPClkSel
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_PortEnabled_Callback
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_PortDisabled_Callback
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Connect_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>

<P><STRONG><a name="[c8]"></a>HCD_RXQLVL_IRQHandler</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, stm32l4xx_hal_hcd.o(i.HCD_RXQLVL_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HCD_RXQLVL_IRQHandler &rArr; USB_ReadPacket
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>

<P><STRONG><a name="[f1]"></a>RCC_SetFlashLatencyFromMSIRange</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, stm32l4xx_hal_rcc.o(i.RCC_SetFlashLatencyFromMSIRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_GetVoltageRange
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[ec]"></a>RCCEx_PLLSAI1_Config</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32l4xx_hal_rcc_ex.o(i.RCCEx_PLLSAI1_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCCEx_PLLSAI1_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[ed]"></a>RCCEx_PLLSAI2_Config</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, stm32l4xx_hal_rcc_ex.o(i.RCCEx_PLLSAI2_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[eb]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[f5]"></a>SPI_EndRxTxTransaction</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, stm32l4xx_hal_spi.o(i.SPI_EndRxTxTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>

<P><STRONG><a name="[11b]"></a>SPI_WaitFifoStateUntilTimeout</STRONG> (Thumb, 218 bytes, Stack size 48 bytes, stm32l4xx_hal_spi.o(i.SPI_WaitFifoStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>

<P><STRONG><a name="[11c]"></a>SPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, stm32l4xx_hal_spi.o(i.SPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>

<P><STRONG><a name="[6b]"></a>USBH_UserProcess</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, usb_host.o(i.USBH_UserProcess))
<BR>[Address Reference Count : 1]<UL><LI> usb_host.o(i.MX_USB_HOST_Init)
</UL>
<P><STRONG><a name="[199]"></a>check_fs</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, ff.o(i.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[1a2]"></a>chk_chr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(i.chk_chr))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[1cc]"></a>chk_lock</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, ff.o(i.chk_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = chk_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[1c9]"></a>clear_lock</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, ff.o(i.clear_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = clear_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[1d8]"></a>clmt_clust</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ff.o(i.clmt_clust))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
</UL>

<P><STRONG><a name="[1aa]"></a>clust2sect</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(i.clust2sect))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[19d]"></a>create_chain</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, ff.o(i.create_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[1a0]"></a>create_name</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, ff.o(i.create_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = create_name
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[1c7]"></a>dec_lock</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, ff.o(i.dec_lock))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[1a4]"></a>dir_alloc</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, ff.o(i.dir_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[1a7]"></a>dir_find</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, ff.o(i.dir_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[1a6]"></a>dir_next</STRONG> (Thumb, 294 bytes, Stack size 32 bytes, ff.o(i.dir_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[1ab]"></a>dir_register</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ff.o(i.dir_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = dir_register &rArr; dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[1a5]"></a>dir_sdi</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, ff.o(i.dir_sdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[1cd]"></a>enq_lock</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ff.o(i.enq_lock))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[1ca]"></a>find_volume</STRONG> (Thumb, 714 bytes, Stack size 40 bytes, ff.o(i.find_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_lock
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[1cb]"></a>follow_path</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, ff.o(i.follow_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[19e]"></a>get_fat</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, ff.o(i.get_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[1c8]"></a>get_ldnumber</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, ff.o(i.get_ldnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[1d3]"></a>inc_lock</STRONG> (Thumb, 144 bytes, Stack size 12 bytes, ff.o(i.inc_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = inc_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[1d0]"></a>ld_clust</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ff.o(i.ld_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ld_clust
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[19c]"></a>ld_dword</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ff.o(i.ld_dword))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[19b]"></a>ld_word</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ff.o(i.ld_word))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[1a8]"></a>mem_cmp</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(i.mem_cmp))
<BR><BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[1ac]"></a>mem_cpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ff.o(i.mem_cpy))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[1a1]"></a>mem_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ff.o(i.mem_set))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[19a]"></a>move_window</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ff.o(i.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[19f]"></a>put_fat</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, ff.o(i.put_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[1d2]"></a>remove_chain</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, ff.o(i.remove_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[1d1]"></a>st_clust</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ff.o(i.st_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = st_clust
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[1cf]"></a>st_dword</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ff.o(i.st_dword))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[1d6]"></a>st_word</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ff.o(i.st_word))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[1d7]"></a>sync_fs</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, ff.o(i.sync_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sync_fs &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[1a9]"></a>sync_window</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, ff.o(i.sync_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[1c6]"></a>validate</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ff.o(i.validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = validate
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[13d]"></a>DeInitStateMachine</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, usbh_core.o(i.DeInitStateMachine))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Init
</UL>

<P><STRONG><a name="[13a]"></a>USBH_HandleEnum</STRONG> (Thumb, 568 bytes, Stack size 40 bytes, usbh_core.o(i.USBH_HandleEnum))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = USBH_HandleEnum &rArr; USBH_Get_StringDesc &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Delay
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetAddress
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OpenPipe
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_StringDesc
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_DevDesc
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_CfgDesc
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_FreePipe
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[146]"></a>USBH_HandleSof</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbh_core.o(i.USBH_HandleSof))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_IncTimer
</UL>

<P><STRONG><a name="[12d]"></a>USBH_HandleControl</STRONG> (Thumb, 454 bytes, Stack size 16 bytes, usbh_ctlreq.o(i.USBH_HandleControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_GetURBState
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlSendSetup
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlSendData
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReceiveData
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_FreePipe
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>

<P><STRONG><a name="[133]"></a>USBH_ParseCfgDesc</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, usbh_ctlreq.o(i.USBH_ParseCfgDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBH_ParseCfgDesc
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetNextDesc
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseInterfaceDesc
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseEPDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_CfgDesc
</UL>

<P><STRONG><a name="[135]"></a>USBH_ParseDevDesc</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, usbh_ctlreq.o(i.USBH_ParseDevDesc))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_DevDesc
</UL>

<P><STRONG><a name="[160]"></a>USBH_ParseEPDesc</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usbh_ctlreq.o(i.USBH_ParseEPDesc))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseCfgDesc
</UL>

<P><STRONG><a name="[15f]"></a>USBH_ParseInterfaceDesc</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, usbh_ctlreq.o(i.USBH_ParseInterfaceDesc))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseCfgDesc
</UL>

<P><STRONG><a name="[137]"></a>USBH_ParseStringDesc</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, usbh_ctlreq.o(i.USBH_ParseStringDesc))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_StringDesc
</UL>

<P><STRONG><a name="[124]"></a>USBH_GetFreePipe</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usbh_pipes.o(i.USBH_GetFreePipe))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AllocPipe
</UL>

<P><STRONG><a name="[b]"></a>USBH_MSC_ClassRequest</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, usbh_msc.o(i.USBH_MSC_ClassRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = USBH_MSC_ClassRequest &rArr; USBH_MSC_BOT_REQ_GetMaxLUN &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_REQ_GetMaxLUN
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ClrFeature
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>USBH_MSC_InterfaceDeInit</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, usbh_msc.o(i.USBH_MSC_InterfaceDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USBH_MSC_InterfaceDeInit &rArr; USBH_ClosePipe &rArr; USBH_LL_ClosePipe &rArr; HAL_HCD_HC_Halt &rArr; USB_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ClosePipe
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_FreePipe
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>USBH_MSC_InterfaceInit</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, usbh_msc.o(i.USBH_MSC_InterfaceInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = USBH_MSC_InterfaceInit &rArr; USBH_OpenPipe &rArr; USBH_LL_OpenPipe &rArr; HAL_HCD_HC_Init &rArr; USB_HC_Init &rArr; USB_GetHostSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_SetToggle
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OpenPipe
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AllocPipe
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SelectInterface
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_FindInterface
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>USBH_MSC_Process</STRONG> (Thumb, 840 bytes, Stack size 32 bytes, usbh_msc.o(i.USBH_MSC_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = USBH_MSC_Process &rArr; USBH_MSC_SCSI_Inquiry &rArr; USBH_MSC_BOT_Process &rArr; USBH_MSC_BOT_REQ_Reset &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_TestUnitReady
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_RequestSense
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_ReadCapacity
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_Inquiry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc.o(.data)
</UL>
<P><STRONG><a name="[159]"></a>USBH_MSC_RdWrProcess</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, usbh_msc.o(i.USBH_MSC_RdWrProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = USBH_MSC_RdWrProcess &rArr; USBH_MSC_SCSI_Write &rArr; USBH_MSC_BOT_Process &rArr; USBH_MSC_BOT_REQ_Reset &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_Write
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_RequestSense
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Write
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Read
</UL>

<P><STRONG><a name="[d]"></a>USBH_MSC_SOFProcess</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbh_msc.o(i.USBH_MSC_SOFProcess))
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc.o(.data)
</UL>
<P><STRONG><a name="[14b]"></a>USBH_MSC_BOT_Abort</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, usbh_msc_bot.o(i.USBH_MSC_BOT_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = USBH_MSC_BOT_Abort &rArr; USBH_ClrFeature &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ClrFeature
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Process
</UL>

<P><STRONG><a name="[14d]"></a>USBH_MSC_DecodeCSW</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, usbh_msc_bot.o(i.USBH_MSC_DecodeCSW))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_MSC_DecodeCSW
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_GetLastXferSize
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Process
</UL>

<P><STRONG><a name="[1ba]"></a>get_fmt_enabled</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, elog.o(i.get_fmt_enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = get_fmt_enabled &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
</UL>

<P><STRONG><a name="[94]"></a>__sti___10_UIcode_cpp_396ac66f</STRONG> (Thumb, 816 bytes, Stack size 8 bytes, uicode.o(i.__sti___10_UIcode_cpp_396ac66f))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = __sti___10_UIcode_cpp_396ac66f &rArr; __aeabi_atexit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_button::c_button()
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::c_wnd()
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard_button::c_keyboard_button()
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wave_buffer::c_wave_buffer()
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wave_ctrl::c_wave_ctrl()
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uicode.o(.init_array)
</UL>
<P><STRONG><a name="[194]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[191]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[197]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[196]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[6e]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0snprintf)
<LI> printfa.o(i.__0vsnprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
